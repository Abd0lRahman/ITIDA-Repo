
ITIDAFirstRTOSproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000358a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000358a  0000361e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  00800084  00800084  00003642  2**0
                  ALLOC
  3 .stab         00002ef8  00000000  00000000  00003644  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001594  00000000  00000000  0000653c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000af05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000be88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__vector_1>
       8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_2>
       c:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__vector_10>
      2c:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <main>
      8a:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXT_INT_Init>:
#include "External_INT_Interface.h"
#include "External_INT_Reg.h"

/*********** External_Interrupt APIS ****************/
//sets the directions of the enabled interrupts to input
void EXT_INT_Init(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	if(INT.Enable_INT0_Interrupt != DISABLE_INT)
     ca6:	80 91 74 00 	lds	r24, 0x0074
     caa:	88 23       	and	r24, r24
     cac:	39 f0       	breq	.+14     	; 0xcbc <EXT_INT_Init+0x1e>
		CLEAR_BIT(DDRD, Pin_Int0);
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8b 7f       	andi	r24, 0xFB	; 251
     cba:	8c 93       	st	X, r24

	if(INT.Enable_INT1_Interrupt != DISABLE_INT)
     cbc:	80 91 75 00 	lds	r24, 0x0075
     cc0:	88 23       	and	r24, r24
     cc2:	39 f0       	breq	.+14     	; 0xcd2 <EXT_INT_Init+0x34>
		CLEAR_BIT(DDRD, Pin_Int1);
     cc4:	a1 e3       	ldi	r26, 0x31	; 49
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	8c 93       	st	X, r24
		
	if(INT.Enable_INT2_Interrupt != DISABLE_INT)
     cd2:	80 91 76 00 	lds	r24, 0x0076
     cd6:	88 23       	and	r24, r24
     cd8:	39 f0       	breq	.+14     	; 0xce8 <EXT_INT_Init+0x4a>
		CLEAR_BIT(DDRB, Pin_Int2);
     cda:	a7 e3       	ldi	r26, 0x37	; 55
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e7 e3       	ldi	r30, 0x37	; 55
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8b 7f       	andi	r24, 0xFB	; 251
     ce6:	8c 93       	st	X, r24
		
}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <EXT_INT_SET_CONFIG>:

//sets the configs of the ext. interrupts to the control registers
void EXT_INT_SET_CONFIG(void)
{	
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <EXT_INT_SET_CONFIG+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <EXT_INT_SET_CONFIG+0x8>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <EXT_INT_SET_CONFIG+0xa>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, GIE); //enable global interrupt
     cfc:	af e5       	ldi	r26, 0x5F	; 95
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ef e5       	ldi	r30, 0x5F	; 95
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	8c 93       	st	X, r24
	
	if(INT.Enable_INT0_Interrupt != DISABLE_INT){
     d0a:	80 91 74 00 	lds	r24, 0x0074
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <EXT_INT_SET_CONFIG+0x26>
     d12:	62 c0       	rjmp	.+196    	; 0xdd8 <EXT_INT_SET_CONFIG+0xea>
		SET_BIT(GICR, ENABLE_INT0); //enable INT0
     d14:	ab e5       	ldi	r26, 0x5B	; 91
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e5       	ldi	r30, 0x5B	; 91
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	8c 93       	st	X, r24
		//set triggering mode
		switch(INT.INT0_Triggering_Mode){
     d22:	80 91 77 00 	lds	r24, 0x0077
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	2d 83       	std	Y+5, r18	; 0x05
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	99 f1       	breq	.+102    	; 0xd9e <EXT_INT_SET_CONFIG+0xb0>
     d38:	2d 81       	ldd	r18, Y+5	; 0x05
     d3a:	3e 81       	ldd	r19, Y+6	; 0x06
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <EXT_INT_SET_CONFIG+0x5e>
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	61 f0       	breq	.+24     	; 0xd62 <EXT_INT_SET_CONFIG+0x74>
     d4a:	46 c0       	rjmp	.+140    	; 0xdd8 <EXT_INT_SET_CONFIG+0xea>
     d4c:	2d 81       	ldd	r18, Y+5	; 0x05
     d4e:	3e 81       	ldd	r19, Y+6	; 0x06
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	99 f1       	breq	.+102    	; 0xdbc <EXT_INT_SET_CONFIG+0xce>
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	81 f0       	breq	.+32     	; 0xd80 <EXT_INT_SET_CONFIG+0x92>
     d60:	3b c0       	rjmp	.+118    	; 0xdd8 <EXT_INT_SET_CONFIG+0xea>
			case LOW_LEVEL_MODE:
				CLEAR_BIT(MCUCR, 0);
     d62:	a5 e5       	ldi	r26, 0x55	; 85
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e5       	ldi	r30, 0x55	; 85
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR, 1);
     d70:	a5 e5       	ldi	r26, 0x55	; 85
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e5 e5       	ldi	r30, 0x55	; 85
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	8c 93       	st	X, r24
     d7e:	2c c0       	rjmp	.+88     	; 0xdd8 <EXT_INT_SET_CONFIG+0xea>
				break;
				
			case FALLING_AND_RISING_EDGE_MODE:
				SET_BIT(MCUCR, 0);
     d80:	a5 e5       	ldi	r26, 0x55	; 85
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e5 e5       	ldi	r30, 0x55	; 85
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR, 1);
     d8e:	a5 e5       	ldi	r26, 0x55	; 85
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e5       	ldi	r30, 0x55	; 85
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	8c 93       	st	X, r24
     d9c:	1d c0       	rjmp	.+58     	; 0xdd8 <EXT_INT_SET_CONFIG+0xea>
				break;
				
			case FALLING_EDGE_MODE:
				CLEAR_BIT(MCUCR, 0);
     d9e:	a5 e5       	ldi	r26, 0x55	; 85
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 e5       	ldi	r30, 0x55	; 85
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8e 7f       	andi	r24, 0xFE	; 254
     daa:	8c 93       	st	X, r24
				SET_BIT(MCUCR, 1);
     dac:	a5 e5       	ldi	r26, 0x55	; 85
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e5 e5       	ldi	r30, 0x55	; 85
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	82 60       	ori	r24, 0x02	; 2
     db8:	8c 93       	st	X, r24
     dba:	0e c0       	rjmp	.+28     	; 0xdd8 <EXT_INT_SET_CONFIG+0xea>
				break;
				
			case RISING_EDGE_MODE:
				SET_BIT(MCUCR, 0);
     dbc:	a5 e5       	ldi	r26, 0x55	; 85
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e5 e5       	ldi	r30, 0x55	; 85
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	8c 93       	st	X, r24
				SET_BIT(MCUCR, 1);
     dca:	a5 e5       	ldi	r26, 0x55	; 85
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e5 e5       	ldi	r30, 0x55	; 85
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	8c 93       	st	X, r24
				break;	
		}
	}

	if(INT.Enable_INT1_Interrupt != DISABLE_INT){
     dd8:	80 91 75 00 	lds	r24, 0x0075
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <EXT_INT_SET_CONFIG+0xf4>
     de0:	62 c0       	rjmp	.+196    	; 0xea6 <EXT_INT_SET_CONFIG+0x1b8>
		SET_BIT(GICR, ENABLE_INT1); //enable INT1
     de2:	ab e5       	ldi	r26, 0x5B	; 91
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	eb e5       	ldi	r30, 0x5B	; 91
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	80 68       	ori	r24, 0x80	; 128
     dee:	8c 93       	st	X, r24
		//set triggering mode
		switch(INT.INT1_Triggering_Mode){
     df0:	80 91 78 00 	lds	r24, 0x0078
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3c 83       	std	Y+4, r19	; 0x04
     dfa:	2b 83       	std	Y+3, r18	; 0x03
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	99 f1       	breq	.+102    	; 0xe6c <EXT_INT_SET_CONFIG+0x17e>
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <EXT_INT_SET_CONFIG+0x12c>
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	61 f0       	breq	.+24     	; 0xe30 <EXT_INT_SET_CONFIG+0x142>
     e18:	46 c0       	rjmp	.+140    	; 0xea6 <EXT_INT_SET_CONFIG+0x1b8>
     e1a:	2b 81       	ldd	r18, Y+3	; 0x03
     e1c:	3c 81       	ldd	r19, Y+4	; 0x04
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	99 f1       	breq	.+102    	; 0xe8a <EXT_INT_SET_CONFIG+0x19c>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	81 f0       	breq	.+32     	; 0xe4e <EXT_INT_SET_CONFIG+0x160>
     e2e:	3b c0       	rjmp	.+118    	; 0xea6 <EXT_INT_SET_CONFIG+0x1b8>
			case LOW_LEVEL_MODE:
				CLEAR_BIT(MCUCR, 2);
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8b 7f       	andi	r24, 0xFB	; 251
     e3c:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR, 3);
     e3e:	a5 e5       	ldi	r26, 0x55	; 85
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e5       	ldi	r30, 0x55	; 85
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	8c 93       	st	X, r24
     e4c:	2c c0       	rjmp	.+88     	; 0xea6 <EXT_INT_SET_CONFIG+0x1b8>
			break;
			
			case FALLING_AND_RISING_EDGE_MODE:
				SET_BIT(MCUCR, 2);
     e4e:	a5 e5       	ldi	r26, 0x55	; 85
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e5       	ldi	r30, 0x55	; 85
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	84 60       	ori	r24, 0x04	; 4
     e5a:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR, 3);
     e5c:	a5 e5       	ldi	r26, 0x55	; 85
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e5       	ldi	r30, 0x55	; 85
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	8c 93       	st	X, r24
     e6a:	1d c0       	rjmp	.+58     	; 0xea6 <EXT_INT_SET_CONFIG+0x1b8>
			break;
			
			case FALLING_EDGE_MODE:
				CLEAR_BIT(MCUCR, 2);
     e6c:	a5 e5       	ldi	r26, 0x55	; 85
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e5 e5       	ldi	r30, 0x55	; 85
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8b 7f       	andi	r24, 0xFB	; 251
     e78:	8c 93       	st	X, r24
				SET_BIT(MCUCR, 3);
     e7a:	a5 e5       	ldi	r26, 0x55	; 85
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e5       	ldi	r30, 0x55	; 85
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	8c 93       	st	X, r24
     e88:	0e c0       	rjmp	.+28     	; 0xea6 <EXT_INT_SET_CONFIG+0x1b8>
			break;
			
			case RISING_EDGE_MODE:
				SET_BIT(MCUCR, 2);
     e8a:	a5 e5       	ldi	r26, 0x55	; 85
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e5       	ldi	r30, 0x55	; 85
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	84 60       	ori	r24, 0x04	; 4
     e96:	8c 93       	st	X, r24
				SET_BIT(MCUCR, 3);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	8c 93       	st	X, r24
			break;
		}
	}
	
	if(INT.Enable_INT2_Interrupt != DISABLE_INT){
     ea6:	80 91 76 00 	lds	r24, 0x0076
     eaa:	88 23       	and	r24, r24
     eac:	39 f1       	breq	.+78     	; 0xefc <EXT_INT_SET_CONFIG+0x20e>
		SET_BIT(GICR, ENABLE_INT2); //enable INT2
     eae:	ab e5       	ldi	r26, 0x5B	; 91
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	eb e5       	ldi	r30, 0x5B	; 91
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	8c 93       	st	X, r24
		//set triggering mode
		switch(INT.INT2_Triggering_Mode){
     ebc:	80 91 79 00 	lds	r24, 0x0079
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3a 83       	std	Y+2, r19	; 0x02
     ec6:	29 83       	std	Y+1, r18	; 0x01
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	31 f0       	breq	.+12     	; 0xede <EXT_INT_SET_CONFIG+0x1f0>
     ed2:	29 81       	ldd	r18, Y+1	; 0x01
     ed4:	3a 81       	ldd	r19, Y+2	; 0x02
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	49 f0       	breq	.+18     	; 0xeee <EXT_INT_SET_CONFIG+0x200>
     edc:	0f c0       	rjmp	.+30     	; 0xefc <EXT_INT_SET_CONFIG+0x20e>
			case FALLING_EDGE_MODE:
				CLEAR_BIT(MCUCSR, 6);
     ede:	a4 e5       	ldi	r26, 0x54	; 84
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e5       	ldi	r30, 0x54	; 84
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	8c 93       	st	X, r24
     eec:	07 c0       	rjmp	.+14     	; 0xefc <EXT_INT_SET_CONFIG+0x20e>
			break;
			
			case RISING_EDGE_MODE:
				SET_BIT(MCUCSR, 6);
     eee:	a4 e5       	ldi	r26, 0x54	; 84
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e4 e5       	ldi	r30, 0x54	; 84
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 64       	ori	r24, 0x40	; 64
     efa:	8c 93       	st	X, r24
			break;
		}
	}
	
}
     efc:	26 96       	adiw	r28, 0x06	; 6
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <external_interrupt_register_callback>:
interrupt_callback_t INT0_callback = NULL;
interrupt_callback_t INT1_callback = NULL;
interrupt_callback_t INT2_callback = NULL;

//assigning callback functions addresses to the pointers
void external_interrupt_register_callback(interrupt_callback_t callback0, interrupt_callback_t callback1, interrupt_callback_t callback2){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <external_interrupt_register_callback+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <external_interrupt_register_callback+0x8>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <external_interrupt_register_callback+0xa>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	7c 83       	std	Y+4, r23	; 0x04
     f22:	6b 83       	std	Y+3, r22	; 0x03
     f24:	5e 83       	std	Y+6, r21	; 0x06
     f26:	4d 83       	std	Y+5, r20	; 0x05
	INT0_callback = callback0;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	90 93 85 00 	sts	0x0085, r25
     f30:	80 93 84 00 	sts	0x0084, r24
	INT1_callback = callback1;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	90 93 87 00 	sts	0x0087, r25
     f3c:	80 93 86 00 	sts	0x0086, r24
	INT2_callback = callback2;
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	90 93 89 00 	sts	0x0089, r25
     f48:	80 93 88 00 	sts	0x0088, r24
}
     f4c:	26 96       	adiw	r28, 0x06	; 6
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <register_EX0>:

void register_EX0(interrupt_callback_t EX){
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <register_EX0+0x6>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
	
	INT0_callback = EX;
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	90 93 85 00 	sts	0x0085, r25
     f74:	80 93 84 00 	sts	0x0084, r24
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <register_EX1>:

void register_EX1(interrupt_callback_t EX1)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <register_EX1+0x6>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
	INT1_callback = EX1;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	90 93 87 00 	sts	0x0087, r25
     f98:	80 93 86 00 	sts	0x0086, r24
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <__vector_1>:

//interrupt service routine for INT0
ISR(EXT_INT_0){
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	2f 93       	push	r18
     fb2:	3f 93       	push	r19
     fb4:	4f 93       	push	r20
     fb6:	5f 93       	push	r21
     fb8:	6f 93       	push	r22
     fba:	7f 93       	push	r23
     fbc:	8f 93       	push	r24
     fbe:	9f 93       	push	r25
     fc0:	af 93       	push	r26
     fc2:	bf 93       	push	r27
     fc4:	ef 93       	push	r30
     fc6:	ff 93       	push	r31
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	if(INT0_callback != NULL)
     fd0:	80 91 84 00 	lds	r24, 0x0084
     fd4:	90 91 85 00 	lds	r25, 0x0085
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	29 f0       	breq	.+10     	; 0xfe6 <__vector_1+0x40>
		INT0_callback();
     fdc:	e0 91 84 00 	lds	r30, 0x0084
     fe0:	f0 91 85 00 	lds	r31, 0x0085
     fe4:	09 95       	icall
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_2>:

//interrupt service routine for INT1
ISR(EXT_INT_1){
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	if(INT1_callback != NULL)
    1036:	80 91 86 00 	lds	r24, 0x0086
    103a:	90 91 87 00 	lds	r25, 0x0087
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	29 f0       	breq	.+10     	; 0x104c <__vector_2+0x40>
		INT1_callback();
    1042:	e0 91 86 00 	lds	r30, 0x0086
    1046:	f0 91 87 00 	lds	r31, 0x0087
    104a:	09 95       	icall
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_3>:

//interrupt service routine for INT2
ISR(EXT_INT_2){
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	if(INT2_callback != NULL)
    109c:	80 91 88 00 	lds	r24, 0x0088
    10a0:	90 91 89 00 	lds	r25, 0x0089
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	29 f0       	breq	.+10     	; 0x10b2 <__vector_3+0x40>
		INT2_callback();
    10a8:	e0 91 88 00 	lds	r30, 0x0088
    10ac:	f0 91 89 00 	lds	r31, 0x0089
    10b0:	09 95       	icall
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <disable_interrupt>:

void disable_interrupt(u8  inter){
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <disable_interrupt+0x6>
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
switch (inter){
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3b 83       	std	Y+3, r19	; 0x03
    10ee:	2a 83       	std	Y+2, r18	; 0x02
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	9b 81       	ldd	r25, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	89 f0       	breq	.+34     	; 0x111c <disable_interrupt+0x44>
    10fa:	2a 81       	ldd	r18, Y+2	; 0x02
    10fc:	3b 81       	ldd	r19, Y+3	; 0x03
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	a1 f0       	breq	.+40     	; 0x112c <disable_interrupt+0x54>
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	9b 81       	ldd	r25, Y+3	; 0x03
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	b9 f4       	brne	.+46     	; 0x113a <disable_interrupt+0x62>
    case 0 :
    	CLEAR_BIT(GICR, ENABLE_INT0);
    110c:	ab e5       	ldi	r26, 0x5B	; 91
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e5       	ldi	r30, 0x5B	; 91
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 7b       	andi	r24, 0xBF	; 191
    1118:	8c 93       	st	X, r24
    111a:	0f c0       	rjmp	.+30     	; 0x113a <disable_interrupt+0x62>
        break;
		
	case 1:
		CLEAR_BIT(GICR, ENABLE_INT1);
    111c:	ab e5       	ldi	r26, 0x5B	; 91
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e5       	ldi	r30, 0x5B	; 91
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 77       	andi	r24, 0x7F	; 127
    1128:	8c 93       	st	X, r24
    112a:	07 c0       	rjmp	.+14     	; 0x113a <disable_interrupt+0x62>
        break;
   
    case 2:
    	CLEAR_BIT(GICR, ENABLE_INT2);
    112c:	ab e5       	ldi	r26, 0x5B	; 91
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e5       	ldi	r30, 0x5B	; 91
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7d       	andi	r24, 0xDF	; 223
    1138:	8c 93       	st	X, r24
      break;

}	
	
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <enable_interrupt>:


void enable_interrupt(u8 interupt_t){
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <enable_interrupt+0x6>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	89 83       	std	Y+1, r24	; 0x01
	switch (interupt_t){
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3b 83       	std	Y+3, r19	; 0x03
    115c:	2a 83       	std	Y+2, r18	; 0x02
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	9b 81       	ldd	r25, Y+3	; 0x03
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	89 f0       	breq	.+34     	; 0x118a <enable_interrupt+0x44>
    1168:	2a 81       	ldd	r18, Y+2	; 0x02
    116a:	3b 81       	ldd	r19, Y+3	; 0x03
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	a1 f0       	breq	.+40     	; 0x119a <enable_interrupt+0x54>
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	b9 f4       	brne	.+46     	; 0x11a8 <enable_interrupt+0x62>
		case 0 :
			CLEAR_BIT(GICR, ENABLE_INT0);
    117a:	ab e5       	ldi	r26, 0x5B	; 91
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e5       	ldi	r30, 0x5B	; 91
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	8c 93       	st	X, r24
    1188:	0f c0       	rjmp	.+30     	; 0x11a8 <enable_interrupt+0x62>
		break;
		
		case 1:
			SET_BIT(GICR, ENABLE_INT1);
    118a:	ab e5       	ldi	r26, 0x5B	; 91
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	eb e5       	ldi	r30, 0x5B	; 91
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	80 68       	ori	r24, 0x80	; 128
    1196:	8c 93       	st	X, r24
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <enable_interrupt+0x62>
		break;
		
		case 2:
			SET_BIT(GICR, ENABLE_INT2);
    119a:	ab e5       	ldi	r26, 0x5B	; 91
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e5       	ldi	r30, 0x5B	; 91
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 62       	ori	r24, 0x20	; 32
    11a6:	8c 93       	st	X, r24

	}
	
	
	
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <EXTI_voidControlGIE>:

//Defination of SREG
#define SRGE_u8_REG  *((volatile u8 *)0x5F)

void EXTI_voidControlGIE(u8 Copy_State)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <EXTI_voidControlGIE+0x6>
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_State)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3b 83       	std	Y+3, r19	; 0x03
    11ca:	2a 83       	std	Y+2, r18	; 0x02
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f0       	breq	.+26     	; 0x11ee <EXTI_voidControlGIE+0x3a>
    11d4:	2a 81       	ldd	r18, Y+2	; 0x02
    11d6:	3b 81       	ldd	r19, Y+3	; 0x03
    11d8:	21 30       	cpi	r18, 0x01	; 1
    11da:	31 05       	cpc	r19, r1
    11dc:	79 f4       	brne	.+30     	; 0x11fc <EXTI_voidControlGIE+0x48>
	{
		case(GIE_u8_ON):
		{
	       SET_BIT(SRGE_u8_REG,7);
    11de:	af e5       	ldi	r26, 0x5F	; 95
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	ef e5       	ldi	r30, 0x5F	; 95
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 68       	ori	r24, 0x80	; 128
    11ea:	8c 93       	st	X, r24
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <EXTI_voidControlGIE+0x48>
	       break;
		}
		case(GIE_u8_OFF):
		{
	       CLEAR_BIT(SRGE_u8_REG,7);
    11ee:	af e5       	ldi	r26, 0x5F	; 95
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e5       	ldi	r30, 0x5F	; 95
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 77       	andi	r24, 0x7F	; 127
    11fa:	8c 93       	st	X, r24
		   break;
		}
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <LCD_voidInitial>:
#include "lcd_interface.h"
#include "lcd_config.h"


void LCD_voidInitial(void)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	cc 54       	subi	r28, 0x4C	; 76
    1216:	d0 40       	sbci	r29, 0x00	; 0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	fe 01       	movw	r30, r28
    1224:	e7 5b       	subi	r30, 0xB7	; 183
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	ac e0       	ldi	r26, 0x0C	; 12
    122e:	b2 e4       	ldi	r27, 0x42	; 66
    1230:	80 83       	st	Z, r24
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	a2 83       	std	Z+2, r26	; 0x02
    1236:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1238:	8e 01       	movw	r16, r28
    123a:	0b 5b       	subi	r16, 0xBB	; 187
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	e7 5b       	subi	r30, 0xB7	; 183
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a ef       	ldi	r20, 0xFA	; 250
    1252:	54 e4       	ldi	r21, 0x44	; 68
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	f8 01       	movw	r30, r16
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	a2 83       	std	Z+2, r26	; 0x02
    1264:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1266:	fe 01       	movw	r30, r28
    1268:	eb 5b       	subi	r30, 0xBB	; 187
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1280:	88 23       	and	r24, r24
    1282:	44 f4       	brge	.+16     	; 0x1294 <LCD_voidInitial+0x8c>
		__ticks = 1;
    1284:	fe 01       	movw	r30, r28
    1286:	ed 5b       	subi	r30, 0xBD	; 189
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
    1292:	64 c0       	rjmp	.+200    	; 0x135c <LCD_voidInitial+0x154>
	else if (__tmp > 65535)
    1294:	fe 01       	movw	r30, r28
    1296:	eb 5b       	subi	r30, 0xBB	; 187
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <LCD_voidInitial+0xac>
    12b2:	43 c0       	rjmp	.+134    	; 0x133a <LCD_voidInitial+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	fe 01       	movw	r30, r28
    12b6:	e7 5b       	subi	r30, 0xB7	; 183
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8e 01       	movw	r16, r28
    12d4:	0d 5b       	subi	r16, 0xBD	; 189
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	f8 01       	movw	r30, r16
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	1f c0       	rjmp	.+62     	; 0x132a <LCD_voidInitial+0x122>
    12ec:	fe 01       	movw	r30, r28
    12ee:	ef 5b       	subi	r30, 0xBF	; 191
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12fa:	fe 01       	movw	r30, r28
    12fc:	ef 5b       	subi	r30, 0xBF	; 191
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	80 81       	ld	r24, Z
    1302:	91 81       	ldd	r25, Z+1	; 0x01
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCD_voidInitial+0xfc>
    1308:	fe 01       	movw	r30, r28
    130a:	ef 5b       	subi	r30, 0xBF	; 191
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	de 01       	movw	r26, r28
    1314:	ad 5b       	subi	r26, 0xBD	; 189
    1316:	bf 4f       	sbci	r27, 0xFF	; 255
    1318:	fe 01       	movw	r30, r28
    131a:	ed 5b       	subi	r30, 0xBD	; 189
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	11 96       	adiw	r26, 0x01	; 1
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	fe 01       	movw	r30, r28
    132c:	ed 5b       	subi	r30, 0xBD	; 189
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	d1 f6       	brne	.-76     	; 0x12ec <LCD_voidInitial+0xe4>
    1338:	24 c0       	rjmp	.+72     	; 0x1382 <LCD_voidInitial+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	8e 01       	movw	r16, r28
    133c:	0d 5b       	subi	r16, 0xBD	; 189
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	fe 01       	movw	r30, r28
    1342:	eb 5b       	subi	r30, 0xBB	; 187
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	f8 01       	movw	r30, r16
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
    135c:	fe 01       	movw	r30, r28
    135e:	ed 5b       	subi	r30, 0xBD	; 189
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	fe 01       	movw	r30, r28
    1368:	ff 96       	adiw	r30, 0x3f	; 63
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	80 83       	st	Z, r24
    136e:	fe 01       	movw	r30, r28
    1370:	ff 96       	adiw	r30, 0x3f	; 63
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <LCD_voidInitial+0x16e>
    137a:	fe 01       	movw	r30, r28
    137c:	ff 96       	adiw	r30, 0x3f	; 63
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
		_delay_ms(35);
		LCD_voidSendCommend(0b0000111000);
    1382:	88 e3       	ldi	r24, 0x38	; 56
    1384:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a0 e2       	ldi	r26, 0x20	; 32
    138e:	b2 e4       	ldi	r27, 0x42	; 66
    1390:	8b af       	std	Y+59, r24	; 0x3b
    1392:	9c af       	std	Y+60, r25	; 0x3c
    1394:	ad af       	std	Y+61, r26	; 0x3d
    1396:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1398:	6b ad       	ldd	r22, Y+59	; 0x3b
    139a:	7c ad       	ldd	r23, Y+60	; 0x3c
    139c:	8d ad       	ldd	r24, Y+61	; 0x3d
    139e:	9e ad       	ldd	r25, Y+62	; 0x3e
    13a0:	2b ea       	ldi	r18, 0xAB	; 171
    13a2:	3a ea       	ldi	r19, 0xAA	; 170
    13a4:	4a e2       	ldi	r20, 0x2A	; 42
    13a6:	50 e4       	ldi	r21, 0x40	; 64
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	8f ab       	std	Y+55, r24	; 0x37
    13b2:	98 af       	std	Y+56, r25	; 0x38
    13b4:	a9 af       	std	Y+57, r26	; 0x39
    13b6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    13b8:	6f a9       	ldd	r22, Y+55	; 0x37
    13ba:	78 ad       	ldd	r23, Y+56	; 0x38
    13bc:	89 ad       	ldd	r24, Y+57	; 0x39
    13be:	9a ad       	ldd	r25, Y+58	; 0x3a
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	1c f4       	brge	.+6      	; 0x13d6 <LCD_voidInitial+0x1ce>
		__ticks = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	8e ab       	std	Y+54, r24	; 0x36
    13d4:	91 c0       	rjmp	.+290    	; 0x14f8 <LCD_voidInitial+0x2f0>
	else if (__tmp > 255)
    13d6:	6f a9       	ldd	r22, Y+55	; 0x37
    13d8:	78 ad       	ldd	r23, Y+56	; 0x38
    13da:	89 ad       	ldd	r24, Y+57	; 0x39
    13dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	53 e4       	ldi	r21, 0x43	; 67
    13e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <LCD_voidInitial+0x1e8>
    13ee:	7b c0       	rjmp	.+246    	; 0x14e6 <LCD_voidInitial+0x2de>
	{
		_delay_ms(__us / 1000.0);
    13f0:	6b ad       	ldd	r22, Y+59	; 0x3b
    13f2:	7c ad       	ldd	r23, Y+60	; 0x3c
    13f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    13f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4a e7       	ldi	r20, 0x7A	; 122
    13fe:	54 e4       	ldi	r21, 0x44	; 68
    1400:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8a ab       	std	Y+50, r24	; 0x32
    140a:	9b ab       	std	Y+51, r25	; 0x33
    140c:	ac ab       	std	Y+52, r26	; 0x34
    140e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1410:	6a a9       	ldd	r22, Y+50	; 0x32
    1412:	7b a9       	ldd	r23, Y+51	; 0x33
    1414:	8c a9       	ldd	r24, Y+52	; 0x34
    1416:	9d a9       	ldd	r25, Y+53	; 0x35
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	4a ef       	ldi	r20, 0xFA	; 250
    141e:	54 e4       	ldi	r21, 0x44	; 68
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	8e a7       	std	Y+46, r24	; 0x2e
    142a:	9f a7       	std	Y+47, r25	; 0x2f
    142c:	a8 ab       	std	Y+48, r26	; 0x30
    142e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1430:	6e a5       	ldd	r22, Y+46	; 0x2e
    1432:	7f a5       	ldd	r23, Y+47	; 0x2f
    1434:	88 a9       	ldd	r24, Y+48	; 0x30
    1436:	99 a9       	ldd	r25, Y+49	; 0x31
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	2c f4       	brge	.+10     	; 0x1452 <LCD_voidInitial+0x24a>
		__ticks = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9d a7       	std	Y+45, r25	; 0x2d
    144e:	8c a7       	std	Y+44, r24	; 0x2c
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <LCD_voidInitial+0x2c8>
	else if (__tmp > 65535)
    1452:	6e a5       	ldd	r22, Y+46	; 0x2e
    1454:	7f a5       	ldd	r23, Y+47	; 0x2f
    1456:	88 a9       	ldd	r24, Y+48	; 0x30
    1458:	99 a9       	ldd	r25, Y+49	; 0x31
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	57 e4       	ldi	r21, 0x47	; 71
    1462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	4c f5       	brge	.+82     	; 0x14bc <LCD_voidInitial+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146a:	6a a9       	ldd	r22, Y+50	; 0x32
    146c:	7b a9       	ldd	r23, Y+51	; 0x33
    146e:	8c a9       	ldd	r24, Y+52	; 0x34
    1470:	9d a9       	ldd	r25, Y+53	; 0x35
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e2       	ldi	r20, 0x20	; 32
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9d a7       	std	Y+45, r25	; 0x2d
    1490:	8c a7       	std	Y+44, r24	; 0x2c
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <LCD_voidInitial+0x2aa>
    1494:	88 ec       	ldi	r24, 0xC8	; 200
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9b a7       	std	Y+43, r25	; 0x2b
    149a:	8a a7       	std	Y+42, r24	; 0x2a
    149c:	8a a5       	ldd	r24, Y+42	; 0x2a
    149e:	9b a5       	ldd	r25, Y+43	; 0x2b
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_voidInitial+0x298>
    14a4:	9b a7       	std	Y+43, r25	; 0x2b
    14a6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    14aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	9d a7       	std	Y+45, r25	; 0x2d
    14b0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    14b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	69 f7       	brne	.-38     	; 0x1494 <LCD_voidInitial+0x28c>
    14ba:	24 c0       	rjmp	.+72     	; 0x1504 <LCD_voidInitial+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    14be:	7f a5       	ldd	r23, Y+47	; 0x2f
    14c0:	88 a9       	ldd	r24, Y+48	; 0x30
    14c2:	99 a9       	ldd	r25, Y+49	; 0x31
    14c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9d a7       	std	Y+45, r25	; 0x2d
    14ce:	8c a7       	std	Y+44, r24	; 0x2c
    14d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    14d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    14d4:	99 a7       	std	Y+41, r25	; 0x29
    14d6:	88 a7       	std	Y+40, r24	; 0x28
    14d8:	88 a5       	ldd	r24, Y+40	; 0x28
    14da:	99 a5       	ldd	r25, Y+41	; 0x29
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <LCD_voidInitial+0x2d4>
    14e0:	99 a7       	std	Y+41, r25	; 0x29
    14e2:	88 a7       	std	Y+40, r24	; 0x28
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <LCD_voidInitial+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14e6:	6f a9       	ldd	r22, Y+55	; 0x37
    14e8:	78 ad       	ldd	r23, Y+56	; 0x38
    14ea:	89 ad       	ldd	r24, Y+57	; 0x39
    14ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8e ab       	std	Y+54, r24	; 0x36
    14f8:	8e a9       	ldd	r24, Y+54	; 0x36
    14fa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14fc:	8f a1       	ldd	r24, Y+39	; 0x27
    14fe:	8a 95       	dec	r24
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_voidInitial+0x2f6>
    1502:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(40);
		LCD_voidSendCommend(0b0000001111);
    1504:	8f e0       	ldi	r24, 0x0F	; 15
    1506:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e2       	ldi	r26, 0x20	; 32
    1510:	b2 e4       	ldi	r27, 0x42	; 66
    1512:	8b a3       	std	Y+35, r24	; 0x23
    1514:	9c a3       	std	Y+36, r25	; 0x24
    1516:	ad a3       	std	Y+37, r26	; 0x25
    1518:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    151a:	6b a1       	ldd	r22, Y+35	; 0x23
    151c:	7c a1       	ldd	r23, Y+36	; 0x24
    151e:	8d a1       	ldd	r24, Y+37	; 0x25
    1520:	9e a1       	ldd	r25, Y+38	; 0x26
    1522:	2b ea       	ldi	r18, 0xAB	; 171
    1524:	3a ea       	ldi	r19, 0xAA	; 170
    1526:	4a e2       	ldi	r20, 0x2A	; 42
    1528:	50 e4       	ldi	r21, 0x40	; 64
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8f 8f       	std	Y+31, r24	; 0x1f
    1534:	98 a3       	std	Y+32, r25	; 0x20
    1536:	a9 a3       	std	Y+33, r26	; 0x21
    1538:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    153a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    153c:	78 a1       	ldd	r23, Y+32	; 0x20
    153e:	89 a1       	ldd	r24, Y+33	; 0x21
    1540:	9a a1       	ldd	r25, Y+34	; 0x22
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	1c f4       	brge	.+6      	; 0x1558 <LCD_voidInitial+0x350>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	8e 8f       	std	Y+30, r24	; 0x1e
    1556:	91 c0       	rjmp	.+290    	; 0x167a <LCD_voidInitial+0x472>
	else if (__tmp > 255)
    1558:	6f 8d       	ldd	r22, Y+31	; 0x1f
    155a:	78 a1       	ldd	r23, Y+32	; 0x20
    155c:	89 a1       	ldd	r24, Y+33	; 0x21
    155e:	9a a1       	ldd	r25, Y+34	; 0x22
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	0c f0       	brlt	.+2      	; 0x1572 <LCD_voidInitial+0x36a>
    1570:	7b c0       	rjmp	.+246    	; 0x1668 <LCD_voidInitial+0x460>
	{
		_delay_ms(__us / 1000.0);
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a e7       	ldi	r20, 0x7A	; 122
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8a 8f       	std	Y+26, r24	; 0x1a
    158c:	9b 8f       	std	Y+27, r25	; 0x1b
    158e:	ac 8f       	std	Y+28, r26	; 0x1c
    1590:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1594:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1596:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1598:	9d 8d       	ldd	r25, Y+29	; 0x1d
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a ef       	ldi	r20, 0xFA	; 250
    15a0:	54 e4       	ldi	r21, 0x44	; 68
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8e 8b       	std	Y+22, r24	; 0x16
    15ac:	9f 8b       	std	Y+23, r25	; 0x17
    15ae:	a8 8f       	std	Y+24, r26	; 0x18
    15b0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    15b2:	6e 89       	ldd	r22, Y+22	; 0x16
    15b4:	7f 89       	ldd	r23, Y+23	; 0x17
    15b6:	88 8d       	ldd	r24, Y+24	; 0x18
    15b8:	99 8d       	ldd	r25, Y+25	; 0x19
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <LCD_voidInitial+0x3cc>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9d 8b       	std	Y+21, r25	; 0x15
    15d0:	8c 8b       	std	Y+20, r24	; 0x14
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <LCD_voidInitial+0x44a>
	else if (__tmp > 65535)
    15d4:	6e 89       	ldd	r22, Y+22	; 0x16
    15d6:	7f 89       	ldd	r23, Y+23	; 0x17
    15d8:	88 8d       	ldd	r24, Y+24	; 0x18
    15da:	99 8d       	ldd	r25, Y+25	; 0x19
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <LCD_voidInitial+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    15ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9d 8b       	std	Y+21, r25	; 0x15
    1612:	8c 8b       	std	Y+20, r24	; 0x14
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <LCD_voidInitial+0x42c>
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9b 8b       	std	Y+19, r25	; 0x13
    161c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    161e:	8a 89       	ldd	r24, Y+18	; 0x12
    1620:	9b 89       	ldd	r25, Y+19	; 0x13
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_voidInitial+0x41a>
    1626:	9b 8b       	std	Y+19, r25	; 0x13
    1628:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	8c 89       	ldd	r24, Y+20	; 0x14
    162c:	9d 89       	ldd	r25, Y+21	; 0x15
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9d 8b       	std	Y+21, r25	; 0x15
    1632:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	8c 89       	ldd	r24, Y+20	; 0x14
    1636:	9d 89       	ldd	r25, Y+21	; 0x15
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <LCD_voidInitial+0x40e>
    163c:	24 c0       	rjmp	.+72     	; 0x1686 <LCD_voidInitial+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6e 89       	ldd	r22, Y+22	; 0x16
    1640:	7f 89       	ldd	r23, Y+23	; 0x17
    1642:	88 8d       	ldd	r24, Y+24	; 0x18
    1644:	99 8d       	ldd	r25, Y+25	; 0x19
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9d 8b       	std	Y+21, r25	; 0x15
    1650:	8c 8b       	std	Y+20, r24	; 0x14
    1652:	8c 89       	ldd	r24, Y+20	; 0x14
    1654:	9d 89       	ldd	r25, Y+21	; 0x15
    1656:	99 8b       	std	Y+17, r25	; 0x11
    1658:	88 8b       	std	Y+16, r24	; 0x10
    165a:	88 89       	ldd	r24, Y+16	; 0x10
    165c:	99 89       	ldd	r25, Y+17	; 0x11
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_voidInitial+0x456>
    1662:	99 8b       	std	Y+17, r25	; 0x11
    1664:	88 8b       	std	Y+16, r24	; 0x10
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <LCD_voidInitial+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1668:	6f 8d       	ldd	r22, Y+31	; 0x1f
    166a:	78 a1       	ldd	r23, Y+32	; 0x20
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8e 8f       	std	Y+30, r24	; 0x1e
    167a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    167c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	8a 95       	dec	r24
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_voidInitial+0x478>
    1684:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(40);
		LCD_voidSendCommend(0b0000000001);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e4       	ldi	r27, 0x40	; 64
    1694:	8b 87       	std	Y+11, r24	; 0x0b
    1696:	9c 87       	std	Y+12, r25	; 0x0c
    1698:	ad 87       	std	Y+13, r26	; 0x0d
    169a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a ef       	ldi	r20, 0xFA	; 250
    16aa:	54 e4       	ldi	r21, 0x44	; 68
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	8f 83       	std	Y+7, r24	; 0x07
    16b6:	98 87       	std	Y+8, r25	; 0x08
    16b8:	a9 87       	std	Y+9, r26	; 0x09
    16ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	2c f4       	brge	.+10     	; 0x16de <LCD_voidInitial+0x4d6>
		__ticks = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <LCD_voidInitial+0x554>
	else if (__tmp > 65535)
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	4c f5       	brge	.+82     	; 0x1748 <LCD_voidInitial+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	0f c0       	rjmp	.+30     	; 0x173e <LCD_voidInitial+0x536>
    1720:	88 ec       	ldi	r24, 0xC8	; 200
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <LCD_voidInitial+0x524>
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f7       	brne	.-38     	; 0x1720 <LCD_voidInitial+0x518>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <LCD_voidInitial+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_voidInitial+0x560>
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		LCD_voidSendCommend(0b0000000110);
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>

}
    1776:	c4 5b       	subi	r28, 0xB4	; 180
    1778:	df 4f       	sbci	r29, 0xFF	; 255
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	08 95       	ret

0000178e <LCD_voidSendCommend>:
void LCD_voidSendCommend(u8 Copy_u8Commend)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	69 97       	sbiw	r28, 0x19	; 25
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	89 8f       	std	Y+25, r24	; 0x19
		/******RS = 0******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_OUTPUT);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_LOW);
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		/*****RW =0*******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_OUTPUT);
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_LOW);
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		/*****Send Command byte to data pin******/
		DIO_u8SetPortDirection(LCD_u8_DATA_PINS_INITIAL_PORT,DIO_u8_PORT_OUTPUT);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	6f ef       	ldi	r22, 0xFF	; 255
    17d0:	0e 94 13 14 	call	0x2826	; 0x2826 <DIO_u8SetPortDirection>
		DIO_u8SetPortValue(LCD_u8_DATA_PINS_INITIAL_PORT,Copy_u8Commend);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	69 8d       	ldd	r22, Y+25	; 0x19
    17d8:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
		/*******SEND PULSE ON ENABLE PIN****/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_OUTPUT);
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_HIGH);
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e8       	ldi	r26, 0x80	; 128
    17f6:	bf e3       	ldi	r27, 0x3F	; 63
    17f8:	8d 8b       	std	Y+21, r24	; 0x15
    17fa:	9e 8b       	std	Y+22, r25	; 0x16
    17fc:	af 8b       	std	Y+23, r26	; 0x17
    17fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1800:	6d 89       	ldd	r22, Y+21	; 0x15
    1802:	7e 89       	ldd	r23, Y+22	; 0x16
    1804:	8f 89       	ldd	r24, Y+23	; 0x17
    1806:	98 8d       	ldd	r25, Y+24	; 0x18
    1808:	2b ea       	ldi	r18, 0xAB	; 171
    180a:	3a ea       	ldi	r19, 0xAA	; 170
    180c:	4a e2       	ldi	r20, 0x2A	; 42
    180e:	50 e4       	ldi	r21, 0x40	; 64
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	89 8b       	std	Y+17, r24	; 0x11
    181a:	9a 8b       	std	Y+18, r25	; 0x12
    181c:	ab 8b       	std	Y+19, r26	; 0x13
    181e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1820:	69 89       	ldd	r22, Y+17	; 0x11
    1822:	7a 89       	ldd	r23, Y+18	; 0x12
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	9c 89       	ldd	r25, Y+20	; 0x14
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	1c f4       	brge	.+6      	; 0x183e <LCD_voidSendCommend+0xb0>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	88 8b       	std	Y+16, r24	; 0x10
    183c:	91 c0       	rjmp	.+290    	; 0x1960 <LCD_voidSendCommend+0x1d2>
	else if (__tmp > 255)
    183e:	69 89       	ldd	r22, Y+17	; 0x11
    1840:	7a 89       	ldd	r23, Y+18	; 0x12
    1842:	8b 89       	ldd	r24, Y+19	; 0x13
    1844:	9c 89       	ldd	r25, Y+20	; 0x14
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	53 e4       	ldi	r21, 0x43	; 67
    184e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	0c f0       	brlt	.+2      	; 0x1858 <LCD_voidSendCommend+0xca>
    1856:	7b c0       	rjmp	.+246    	; 0x194e <LCD_voidSendCommend+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    1858:	6d 89       	ldd	r22, Y+21	; 0x15
    185a:	7e 89       	ldd	r23, Y+22	; 0x16
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a e7       	ldi	r20, 0x7A	; 122
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8c 87       	std	Y+12, r24	; 0x0c
    1872:	9d 87       	std	Y+13, r25	; 0x0d
    1874:	ae 87       	std	Y+14, r26	; 0x0e
    1876:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	6c 85       	ldd	r22, Y+12	; 0x0c
    187a:	7d 85       	ldd	r23, Y+13	; 0x0d
    187c:	8e 85       	ldd	r24, Y+14	; 0x0e
    187e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a ef       	ldi	r20, 0xFA	; 250
    1886:	54 e4       	ldi	r21, 0x44	; 68
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	88 87       	std	Y+8, r24	; 0x08
    1892:	99 87       	std	Y+9, r25	; 0x09
    1894:	aa 87       	std	Y+10, r26	; 0x0a
    1896:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1898:	68 85       	ldd	r22, Y+8	; 0x08
    189a:	79 85       	ldd	r23, Y+9	; 0x09
    189c:	8a 85       	ldd	r24, Y+10	; 0x0a
    189e:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_voidSendCommend+0x12c>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9f 83       	std	Y+7, r25	; 0x07
    18b6:	8e 83       	std	Y+6, r24	; 0x06
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_voidSendCommend+0x1aa>
	else if (__tmp > 65535)
    18ba:	68 85       	ldd	r22, Y+8	; 0x08
    18bc:	79 85       	ldd	r23, Y+9	; 0x09
    18be:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_voidSendCommend+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    18d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    18d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9f 83       	std	Y+7, r25	; 0x07
    18f8:	8e 83       	std	Y+6, r24	; 0x06
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_voidSendCommend+0x18c>
    18fc:	88 ec       	ldi	r24, 0xC8	; 200
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9d 83       	std	Y+5, r25	; 0x05
    1902:	8c 83       	std	Y+4, r24	; 0x04
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_voidSendCommend+0x17a>
    190c:	9d 83       	std	Y+5, r25	; 0x05
    190e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
    1912:	9f 81       	ldd	r25, Y+7	; 0x07
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9f 83       	std	Y+7, r25	; 0x07
    1918:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8e 81       	ldd	r24, Y+6	; 0x06
    191c:	9f 81       	ldd	r25, Y+7	; 0x07
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_voidSendCommend+0x16e>
    1922:	24 c0       	rjmp	.+72     	; 0x196c <LCD_voidSendCommend+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	68 85       	ldd	r22, Y+8	; 0x08
    1926:	79 85       	ldd	r23, Y+9	; 0x09
    1928:	8a 85       	ldd	r24, Y+10	; 0x0a
    192a:	9b 85       	ldd	r25, Y+11	; 0x0b
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9f 83       	std	Y+7, r25	; 0x07
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	8e 81       	ldd	r24, Y+6	; 0x06
    193a:	9f 81       	ldd	r25, Y+7	; 0x07
    193c:	9b 83       	std	Y+3, r25	; 0x03
    193e:	8a 83       	std	Y+2, r24	; 0x02
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_voidSendCommend+0x1b6>
    1948:	9b 83       	std	Y+3, r25	; 0x03
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	0f c0       	rjmp	.+30     	; 0x196c <LCD_voidSendCommend+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    194e:	69 89       	ldd	r22, Y+17	; 0x11
    1950:	7a 89       	ldd	r23, Y+18	; 0x12
    1952:	8b 89       	ldd	r24, Y+19	; 0x13
    1954:	9c 89       	ldd	r25, Y+20	; 0x14
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	88 8b       	std	Y+16, r24	; 0x10
    1960:	88 89       	ldd	r24, Y+16	; 0x10
    1962:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	8a 95       	dec	r24
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_voidSendCommend+0x1d8>
    196a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_LOW);
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
}
    1976:	69 96       	adiw	r28, 0x19	; 25
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	69 97       	sbiw	r28, 0x19	; 25
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	89 8f       	std	Y+25, r24	; 0x19
		/******RS = 1******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_OUTPUT);
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RS_PIN ,DIO_u8_PIN_HIGH);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		/*****RW =0*******/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_OUTPUT);
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_RW_PIN ,DIO_u8_PIN_LOW);
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		/*****Send Command byte to data pin******/
		DIO_u8SetPortDirection(LCD_u8_DATA_PINS_INITIAL_PORT,DIO_u8_PORT_OUTPUT);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	6f ef       	ldi	r22, 0xFF	; 255
    19ca:	0e 94 13 14 	call	0x2826	; 0x2826 <DIO_u8SetPortDirection>
		DIO_u8SetPortValue(LCD_u8_DATA_PINS_INITIAL_PORT,Copy_u8Char);
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	69 8d       	ldd	r22, Y+25	; 0x19
    19d2:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
		/*******SEND PULSE ON ENABLE PIN****/
		DIO_u8SetPinDirection(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_OUTPUT);
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_HIGH);
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	62 e0       	ldi	r22, 0x02	; 2
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e8       	ldi	r26, 0x80	; 128
    19f0:	bf e3       	ldi	r27, 0x3F	; 63
    19f2:	8d 8b       	std	Y+21, r24	; 0x15
    19f4:	9e 8b       	std	Y+22, r25	; 0x16
    19f6:	af 8b       	std	Y+23, r26	; 0x17
    19f8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19fa:	6d 89       	ldd	r22, Y+21	; 0x15
    19fc:	7e 89       	ldd	r23, Y+22	; 0x16
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	2b ea       	ldi	r18, 0xAB	; 171
    1a04:	3a ea       	ldi	r19, 0xAA	; 170
    1a06:	4a e2       	ldi	r20, 0x2A	; 42
    1a08:	50 e4       	ldi	r21, 0x40	; 64
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	89 8b       	std	Y+17, r24	; 0x11
    1a14:	9a 8b       	std	Y+18, r25	; 0x12
    1a16:	ab 8b       	std	Y+19, r26	; 0x13
    1a18:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a1a:	69 89       	ldd	r22, Y+17	; 0x11
    1a1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a20:	9c 89       	ldd	r25, Y+20	; 0x14
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	1c f4       	brge	.+6      	; 0x1a38 <LCD_voidSendChar+0xb0>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	88 8b       	std	Y+16, r24	; 0x10
    1a36:	91 c0       	rjmp	.+290    	; 0x1b5a <LCD_voidSendChar+0x1d2>
	else if (__tmp > 255)
    1a38:	69 89       	ldd	r22, Y+17	; 0x11
    1a3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	53 e4       	ldi	r21, 0x43	; 67
    1a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <LCD_voidSendChar+0xca>
    1a50:	7b c0       	rjmp	.+246    	; 0x1b48 <LCD_voidSendChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8c 87       	std	Y+12, r24	; 0x0c
    1a6c:	9d 87       	std	Y+13, r25	; 0x0d
    1a6e:	ae 87       	std	Y+14, r26	; 0x0e
    1a70:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	88 87       	std	Y+8, r24	; 0x08
    1a8c:	99 87       	std	Y+9, r25	; 0x09
    1a8e:	aa 87       	std	Y+10, r26	; 0x0a
    1a90:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a92:	68 85       	ldd	r22, Y+8	; 0x08
    1a94:	79 85       	ldd	r23, Y+9	; 0x09
    1a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <LCD_voidSendChar+0x12c>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9f 83       	std	Y+7, r25	; 0x07
    1ab0:	8e 83       	std	Y+6, r24	; 0x06
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <LCD_voidSendChar+0x1aa>
	else if (__tmp > 65535)
    1ab4:	68 85       	ldd	r22, Y+8	; 0x08
    1ab6:	79 85       	ldd	r23, Y+9	; 0x09
    1ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <LCD_voidSendChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ace:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ad2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9f 83       	std	Y+7, r25	; 0x07
    1af2:	8e 83       	std	Y+6, r24	; 0x06
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <LCD_voidSendChar+0x18c>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9d 83       	std	Y+5, r25	; 0x05
    1afc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_voidSendChar+0x17a>
    1b06:	9d 83       	std	Y+5, r25	; 0x05
    1b08:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9f 83       	std	Y+7, r25	; 0x07
    1b12:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8e 81       	ldd	r24, Y+6	; 0x06
    1b16:	9f 81       	ldd	r25, Y+7	; 0x07
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <LCD_voidSendChar+0x16e>
    1b1c:	24 c0       	rjmp	.+72     	; 0x1b66 <LCD_voidSendChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	68 85       	ldd	r22, Y+8	; 0x08
    1b20:	79 85       	ldd	r23, Y+9	; 0x09
    1b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9f 83       	std	Y+7, r25	; 0x07
    1b30:	8e 83       	std	Y+6, r24	; 0x06
    1b32:	8e 81       	ldd	r24, Y+6	; 0x06
    1b34:	9f 81       	ldd	r25, Y+7	; 0x07
    1b36:	9b 83       	std	Y+3, r25	; 0x03
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_voidSendChar+0x1b6>
    1b42:	9b 83       	std	Y+3, r25	; 0x03
    1b44:	8a 83       	std	Y+2, r24	; 0x02
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <LCD_voidSendChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b48:	69 89       	ldd	r22, Y+17	; 0x11
    1b4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	88 8b       	std	Y+16, r24	; 0x10
    1b5a:	88 89       	ldd	r24, Y+16	; 0x10
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	8a 95       	dec	r24
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_voidSendChar+0x1d8>
    1b64:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		DIO_u8SetPinValue(LCD_u8_CONTROL_PINS_INITIAL_PORT,LCD_u8_E_PIN ,DIO_u8_PIN_LOW);
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
}
    1b70:	69 96       	adiw	r28, 0x19	; 25
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <LCD_voidSendStr>:
void LCD_voidSendStr(u8 s[])
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	62 97       	sbiw	r28, 0x12	; 18
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	9a 8b       	std	Y+18, r25	; 0x12
    1b98:	89 8b       	std	Y+17, r24	; 0x11
		u8 i=0;
    1b9a:	18 8a       	std	Y+16, r1	; 0x10
		u8 size=strlen(s);
    1b9c:	89 89       	ldd	r24, Y+17	; 0x11
    1b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba0:	0e 94 ba 1a 	call	0x3574	; 0x3574 <strlen>
    1ba4:	8f 87       	std	Y+15, r24	; 0x0f
    1ba6:	80 c0       	rjmp	.+256    	; 0x1ca8 <LCD_voidSendStr+0x126>
		while(i<size)
			{
			    LCD_voidSendChar(s[i]);
    1ba8:	88 89       	ldd	r24, Y+16	; 0x10
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	89 89       	ldd	r24, Y+17	; 0x11
    1bb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e2 0f       	add	r30, r18
    1bb6:	f3 1f       	adc	r31, r19
    1bb8:	80 81       	ld	r24, Z
    1bba:	0e 94 c4 0c 	call	0x1988	; 0x1988 <LCD_voidSendChar>
				i++;
    1bbe:	88 89       	ldd	r24, Y+16	; 0x10
    1bc0:	8f 5f       	subi	r24, 0xFF	; 255
    1bc2:	88 8b       	std	Y+16, r24	; 0x10
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a0 e0       	ldi	r26, 0x00	; 0
    1bca:	b0 e4       	ldi	r27, 0x40	; 64
    1bcc:	8b 87       	std	Y+11, r24	; 0x0b
    1bce:	9c 87       	std	Y+12, r25	; 0x0c
    1bd0:	ad 87       	std	Y+13, r26	; 0x0d
    1bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a ef       	ldi	r20, 0xFA	; 250
    1be2:	54 e4       	ldi	r21, 0x44	; 68
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8f 83       	std	Y+7, r24	; 0x07
    1bee:	98 87       	std	Y+8, r25	; 0x08
    1bf0:	a9 87       	std	Y+9, r26	; 0x09
    1bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <LCD_voidSendStr+0x94>
		__ticks = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	3f c0       	rjmp	.+126    	; 0x1c94 <LCD_voidSendStr+0x112>
	else if (__tmp > 65535)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	3f ef       	ldi	r19, 0xFF	; 255
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	57 e4       	ldi	r21, 0x47	; 71
    1c26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	4c f5       	brge	.+82     	; 0x1c80 <LCD_voidSendStr+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <LCD_voidSendStr+0xf4>
    1c58:	88 ec       	ldi	r24, 0xC8	; 200
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_voidSendStr+0xe2>
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	69 f7       	brne	.-38     	; 0x1c58 <LCD_voidSendStr+0xd6>
    1c7e:	14 c0       	rjmp	.+40     	; 0x1ca8 <LCD_voidSendStr+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	9e 83       	std	Y+6, r25	; 0x06
    1c92:	8d 83       	std	Y+5, r24	; 0x05
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <LCD_voidSendStr+0x11e>
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_voidSendStr(u8 s[])
{
		u8 i=0;
		u8 size=strlen(s);
		while(i<size)
    1ca8:	98 89       	ldd	r25, Y+16	; 0x10
    1caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cac:	98 17       	cp	r25, r24
    1cae:	08 f4       	brcc	.+2      	; 0x1cb2 <LCD_voidSendStr+0x130>
    1cb0:	7b cf       	rjmp	.-266    	; 0x1ba8 <LCD_voidSendStr+0x26>
			{
			    LCD_voidSendChar(s[i]);
				i++;
				_delay_ms(2);
			}
}
    1cb2:	62 96       	adiw	r28, 0x12	; 18
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 Copy_u8X,u8  Copy_u8Y)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <LCD_voidGoToXY+0x6>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <LCD_voidGoToXY+0x8>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8X)
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3c 83       	std	Y+4, r19	; 0x04
    1cdc:	2b 83       	std	Y+3, r18	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <LCD_voidGoToXY+0x2e>
    1ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cea:	21 30       	cpi	r18, 0x01	; 1
    1cec:	31 05       	cpc	r19, r1
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <LCD_voidGoToXY+0x38>
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <LCD_voidGoToXY+0x40>
	{
	case(LCD_u8_LINE0):
	{
		LCD_voidSendCommend((0x80+(Copy_u8Y)));
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	80 58       	subi	r24, 0x80	; 128
    1cf6:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <LCD_voidGoToXY+0x40>
		break;
	}
	case(LCD_u8_LINE1):
	{
		LCD_voidSendCommend((0xC0+(Copy_u8Y)));
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	80 54       	subi	r24, 0x40	; 64
    1d00:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
		break;
	}
	}
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <LCD_voidClear>:
void LCD_voidClear(void)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommend(0b0000000001);
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e4       	ldi	r27, 0x40	; 64
    1d34:	8b 87       	std	Y+11, r24	; 0x0b
    1d36:	9c 87       	std	Y+12, r25	; 0x0c
    1d38:	ad 87       	std	Y+13, r26	; 0x0d
    1d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8f 83       	std	Y+7, r24	; 0x07
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	a9 87       	std	Y+9, r26	; 0x09
    1d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <LCD_voidClear+0x6c>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <LCD_voidClear+0xcc>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_voidClear+0xba>
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <LCD_voidClear+0xae>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_voidClear+0xf6>
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e10:	2e 96       	adiw	r28, 0x0e	; 14
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <LCD_voidSpecialChar>:
void LCD_voidSpecialChar(u8 Copy_u8Char,u8 *Copy_pu8Pattern)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <LCD_voidSpecialChar+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <LCD_voidSpecialChar+0x8>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	8a 83       	std	Y+2, r24	; 0x02
    1e30:	7c 83       	std	Y+4, r23	; 0x04
    1e32:	6b 83       	std	Y+3, r22	; 0x03
	LCD_voidSendCommend(Copy_u8Char);
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
	u8 i;
	for(i=0;i<8;i++)
    1e3a:	19 82       	std	Y+1, r1	; 0x01
    1e3c:	0e c0       	rjmp	.+28     	; 0x1e5a <LCD_voidSpecialChar+0x38>
	{
		LCD_voidSendChar(Copy_pu8Pattern[i]);
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	fc 01       	movw	r30, r24
    1e4a:	e2 0f       	add	r30, r18
    1e4c:	f3 1f       	adc	r31, r19
    1e4e:	80 81       	ld	r24, Z
    1e50:	0e 94 c4 0c 	call	0x1988	; 0x1988 <LCD_voidSendChar>
}
void LCD_voidSpecialChar(u8 Copy_u8Char,u8 *Copy_pu8Pattern)
{
	LCD_voidSendCommend(Copy_u8Char);
	u8 i;
	for(i=0;i<8;i++)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	8f 5f       	subi	r24, 0xFF	; 255
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	88 30       	cpi	r24, 0x08	; 8
    1e5e:	78 f3       	brcs	.-34     	; 0x1e3e <LCD_voidSpecialChar+0x1c>
	{
		LCD_voidSendChar(Copy_pu8Pattern[i]);
	}
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <LCD_voidShift>:
void LCD_voidShift(u8 Copy_u8Direction)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <LCD_voidShift+0x6>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Direction)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	3b 83       	std	Y+3, r19	; 0x03
    1e84:	2a 83       	std	Y+2, r18	; 0x02
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	88 31       	cpi	r24, 0x18	; 24
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <LCD_voidShift+0x2e>
    1e90:	2a 81       	ldd	r18, Y+2	; 0x02
    1e92:	3b 81       	ldd	r19, Y+3	; 0x03
    1e94:	2c 31       	cpi	r18, 0x1C	; 28
    1e96:	31 05       	cpc	r19, r1
    1e98:	29 f0       	breq	.+10     	; 0x1ea4 <LCD_voidShift+0x36>
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <LCD_voidShift+0x3c>
	{
	case(LCD_u8_LEFT):
	    {
		    LCD_voidSendCommend(0b0000011000);
    1e9c:	88 e1       	ldi	r24, 0x18	; 24
    1e9e:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <LCD_voidShift+0x3c>
		    break ;
	    }
	case(LCD_u8_RIGHT):
		{
		    LCD_voidSendCommend(0b0000011100);
    1ea4:	8c e1       	ldi	r24, 0x1C	; 28
    1ea6:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCD_voidSendCommend>
			break ;
		}
	}
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_voidSendNum>:
void LCD_voidSendNum(s16 Copy_u16Number)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	29 97       	sbiw	r28, 0x09	; 9
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	98 87       	std	Y+8, r25	; 0x08
    1ecc:	8f 83       	std	Y+7, r24	; 0x07
	s8 count=0,reminder;
    1ece:	1e 82       	std	Y+6, r1	; 0x06
	s16 Local_u16Reversed=0;
    1ed0:	1c 82       	std	Y+4, r1	; 0x04
    1ed2:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u16Number==0)
    1ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed6:	98 85       	ldd	r25, Y+8	; 0x08
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	21 f4       	brne	.+8      	; 0x1ee4 <LCD_voidSendNum+0x2e>
	{
		LCD_voidSendChar(0+48);
    1edc:	80 e3       	ldi	r24, 0x30	; 48
    1ede:	0e 94 c4 0c 	call	0x1988	; 0x1988 <LCD_voidSendChar>
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <LCD_voidSendNum+0x4a>
	}
	else if(Copy_u16Number<0)
    1ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee6:	98 85       	ldd	r25, Y+8	; 0x08
    1ee8:	99 23       	and	r25, r25
    1eea:	54 f4       	brge	.+20     	; 0x1f00 <LCD_voidSendNum+0x4a>
	{
		LCD_voidSendChar('-');
    1eec:	8d e2       	ldi	r24, 0x2D	; 45
    1eee:	0e 94 c4 0c 	call	0x1988	; 0x1988 <LCD_voidSendChar>
		Copy_u16Number*=-1;
    1ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef4:	98 85       	ldd	r25, Y+8	; 0x08
    1ef6:	90 95       	com	r25
    1ef8:	81 95       	neg	r24
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	98 87       	std	Y+8, r25	; 0x08
    1efe:	8f 83       	std	Y+7, r24	; 0x07
	}
	s16 test=Copy_u16Number;
    1f00:	8f 81       	ldd	r24, Y+7	; 0x07
    1f02:	98 85       	ldd	r25, Y+8	; 0x08
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	29 c0       	rjmp	.+82     	; 0x1f5c <LCD_voidSendNum+0xa6>
	while(test)
	{
	reminder=test % 10;
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	2a e0       	ldi	r18, 0x0A	; 10
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	b9 01       	movw	r22, r18
    1f14:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__divmodhi4>
    1f18:	8d 83       	std	Y+5, r24	; 0x05
	Local_u16Reversed=(Local_u16Reversed*10)+reminder;
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	9c 01       	movw	r18, r24
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	c9 01       	movw	r24, r18
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	28 0f       	add	r18, r24
    1f30:	39 1f       	adc	r19, r25
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	99 27       	eor	r25, r25
    1f36:	87 fd       	sbrc	r24, 7
    1f38:	90 95       	com	r25
    1f3a:	82 0f       	add	r24, r18
    1f3c:	93 1f       	adc	r25, r19
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
	test/=10;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	2a e0       	ldi	r18, 0x0A	; 10
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__divmodhi4>
    1f50:	cb 01       	movw	r24, r22
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
	count++;
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	8e 83       	std	Y+6, r24	; 0x06
	{
		LCD_voidSendChar('-');
		Copy_u16Number*=-1;
	}
	s16 test=Copy_u16Number;
	while(test)
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	99 f6       	brne	.-90     	; 0x1f0a <LCD_voidSendNum+0x54>
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <LCD_voidSendNum+0xdc>
	test/=10;
	count++;
	}
	while(count--)
	{
	reminder=Local_u16Reversed % 10;
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	2a e0       	ldi	r18, 0x0A	; 10
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	b9 01       	movw	r22, r18
    1f70:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__divmodhi4>
    1f74:	8d 83       	std	Y+5, r24	; 0x05
	LCD_voidSendChar(reminder+48);
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	80 5d       	subi	r24, 0xD0	; 208
    1f7a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <LCD_voidSendChar>
	Local_u16Reversed/=10;
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	2a e0       	ldi	r18, 0x0A	; 10
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	b9 01       	movw	r22, r18
    1f88:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__divmodhi4>
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
	reminder=test % 10;
	Local_u16Reversed=(Local_u16Reversed*10)+reminder;
	test/=10;
	count++;
	}
	while(count--)
    1f92:	8e 81       	ldd	r24, Y+6	; 0x06
    1f94:	89 87       	std	Y+9, r24	; 0x09
    1f96:	89 85       	ldd	r24, Y+9	; 0x09
    1f98:	88 23       	and	r24, r24
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <LCD_voidSendNum+0xea>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 87       	std	Y+9, r24	; 0x09
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	91 50       	subi	r25, 0x01	; 1
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	88 23       	and	r24, r24
    1faa:	e9 f6       	brne	.-70     	; 0x1f66 <LCD_voidSendNum+0xb0>
	reminder=Local_u16Reversed % 10;
	LCD_voidSendChar(reminder+48);
	Local_u16Reversed/=10;

	}
}
    1fac:	29 96       	adiw	r28, 0x09	; 9
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <main>:
void Task_4(void);
void Task_5(void);
void ISR_Func(void);

int main()
{
    1fbe:	cf 92       	push	r12
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
	DIO_u8IntialDirection();
    1fd0:	0e 94 15 11 	call	0x222a	; 0x222a <DIO_u8IntialDirection>
	DIO_u8IntialValue();
    1fd4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <DIO_u8IntialValue>
	LCD_voidInitial();
    1fd8:	0e 94 04 09 	call	0x1208	; 0x1208 <LCD_voidInitial>
	LCD_voidSendStr("Abdelrahman");
    1fdc:	80 e6       	ldi	r24, 0x60	; 96
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidSendStr>
	TMR1_voidInit();
    1fe4:	0e 94 b4 18 	call	0x3168	; 0x3168 <TMR1_voidInit>
	TMR1_voidSetICR(19999);
    1fe8:	8f e1       	ldi	r24, 0x1F	; 31
    1fea:	9e e4       	ldi	r25, 0x4E	; 78
    1fec:	0e 94 33 19 	call	0x3266	; 0x3266 <TMR1_voidSetICR>

	EXT_INT_Init();
    1ff0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EXT_INT_Init>
	EXT_INT_SET_CONFIG();
    1ff4:	0e 94 77 06 	call	0xcee	; 0xcee <EXT_INT_SET_CONFIG>
	register_EX0(ISR_Func);
    1ff8:	88 ee       	ldi	r24, 0xE8	; 232
    1ffa:	90 e1       	ldi	r25, 0x10	; 16
    1ffc:	0e 94 af 07 	call	0xf5e	; 0xf5e <register_EX0>

	RTO_u8CreateTask(0,1000,0,&Task_1,1);
    2000:	e3 e5       	ldi	r30, 0x53	; 83
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	48 ee       	ldi	r20, 0xE8	; 232
    2008:	53 e0       	ldi	r21, 0x03	; 3
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	00 e0       	ldi	r16, 0x00	; 0
    2010:	10 e0       	ldi	r17, 0x00	; 0
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	7f 01       	movw	r14, r30
    2018:	cc 24       	eor	r12, r12
    201a:	c3 94       	inc	r12
    201c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <RTO_u8CreateTask>
	RTO_u8CreateTask(1,2000,0,&Task_2,1);
    2020:	ee e6       	ldi	r30, 0x6E	; 110
    2022:	f0 e1       	ldi	r31, 0x10	; 16
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	40 ed       	ldi	r20, 0xD0	; 208
    2028:	57 e0       	ldi	r21, 0x07	; 7
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	00 e0       	ldi	r16, 0x00	; 0
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	7f 01       	movw	r14, r30
    2038:	cc 24       	eor	r12, r12
    203a:	c3 94       	inc	r12
    203c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <RTO_u8CreateTask>
	RTO_u8CreateTask(2,5000,0,&Task_3,1);
    2040:	e9 e8       	ldi	r30, 0x89	; 137
    2042:	f0 e1       	ldi	r31, 0x10	; 16
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	48 e8       	ldi	r20, 0x88	; 136
    2048:	53 e1       	ldi	r21, 0x13	; 19
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	00 e0       	ldi	r16, 0x00	; 0
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	7f 01       	movw	r14, r30
    2058:	cc 24       	eor	r12, r12
    205a:	c3 94       	inc	r12
    205c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <RTO_u8CreateTask>
	RTO_u8CreateTask(3,300,0,&Task_4,1);
    2060:	e4 ea       	ldi	r30, 0xA4	; 164
    2062:	f0 e1       	ldi	r31, 0x10	; 16
    2064:	83 e0       	ldi	r24, 0x03	; 3
    2066:	4c e2       	ldi	r20, 0x2C	; 44
    2068:	51 e0       	ldi	r21, 0x01	; 1
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	00 e0       	ldi	r16, 0x00	; 0
    2070:	10 e0       	ldi	r17, 0x00	; 0
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	7f 01       	movw	r14, r30
    2078:	cc 24       	eor	r12, r12
    207a:	c3 94       	inc	r12
    207c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <RTO_u8CreateTask>
	RTO_u8CreateTask(4,1000,0,&Task_5,1);
    2080:	e9 ec       	ldi	r30, 0xC9	; 201
    2082:	f0 e1       	ldi	r31, 0x10	; 16
    2084:	84 e0       	ldi	r24, 0x04	; 4
    2086:	48 ee       	ldi	r20, 0xE8	; 232
    2088:	53 e0       	ldi	r21, 0x03	; 3
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	00 e0       	ldi	r16, 0x00	; 0
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	7f 01       	movw	r14, r30
    2098:	cc 24       	eor	r12, r12
    209a:	c3 94       	inc	r12
    209c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <RTO_u8CreateTask>
	RTO_voidStartSys();
    20a0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <RTO_voidStartSys>
    20a4:	ff cf       	rjmp	.-2      	; 0x20a4 <main+0xe6>

000020a6 <Task_1>:
	while(1);
	return 0;
}
void Task_1(void)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    20ae:	80 91 8a 00 	lds	r24, 0x008A
    20b2:	88 23       	and	r24, r24
    20b4:	49 f4       	brne	.+18     	; 0x20c8 <Task_1+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_HIGH);
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		flag = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	80 93 8a 00 	sts	0x008A, r24
    20c6:	07 c0       	rjmp	.+14     	; 0x20d6 <Task_1+0x30>
	}
	else
	{
		flag = 0;
    20c8:	10 92 8a 00 	sts	0x008A, r1
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_LOW);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
	}
}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <Task_2>:
void Task_2(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    20e4:	80 91 8b 00 	lds	r24, 0x008B
    20e8:	88 23       	and	r24, r24
    20ea:	49 f4       	brne	.+18     	; 0x20fe <Task_2+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_HIGH);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		flag = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 8b 00 	sts	0x008B, r24
    20fc:	07 c0       	rjmp	.+14     	; 0x210c <Task_2+0x30>
	}
	else
	{
		flag = 0;
    20fe:	10 92 8b 00 	sts	0x008B, r1
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_LOW);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	61 e0       	ldi	r22, 0x01	; 1
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
	}
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <Task_3>:
void Task_3(void)
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
    211a:	80 91 8c 00 	lds	r24, 0x008C
    211e:	88 23       	and	r24, r24
    2120:	49 f4       	brne	.+18     	; 0x2134 <Task_3+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_HIGH);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	62 e0       	ldi	r22, 0x02	; 2
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		flag = 1;
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	80 93 8c 00 	sts	0x008C, r24
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <Task_3+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_LOW);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	62 e0       	ldi	r22, 0x02	; 2
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <DIO_u8SetPinValue>
		flag = 0;
    213e:	10 92 8c 00 	sts	0x008C, r1
	}
}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <Task_4>:
void Task_4(void)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 999;
	counter+=100;
    2150:	80 91 80 00 	lds	r24, 0x0080
    2154:	90 91 81 00 	lds	r25, 0x0081
    2158:	8c 59       	subi	r24, 0x9C	; 156
    215a:	9f 4f       	sbci	r25, 0xFF	; 255
    215c:	90 93 81 00 	sts	0x0081, r25
    2160:	80 93 80 00 	sts	0x0080, r24
	if(counter == 1999)
    2164:	80 91 80 00 	lds	r24, 0x0080
    2168:	90 91 81 00 	lds	r25, 0x0081
    216c:	27 e0       	ldi	r18, 0x07	; 7
    216e:	8f 3c       	cpi	r24, 0xCF	; 207
    2170:	92 07       	cpc	r25, r18
    2172:	31 f4       	brne	.+12     	; 0x2180 <Task_4+0x38>
	{
		counter = 999;
    2174:	87 ee       	ldi	r24, 0xE7	; 231
    2176:	93 e0       	ldi	r25, 0x03	; 3
    2178:	90 93 81 00 	sts	0x0081, r25
    217c:	80 93 80 00 	sts	0x0080, r24
	}
	TMR1_voidSetCompareMatch(counter);
    2180:	80 91 80 00 	lds	r24, 0x0080
    2184:	90 91 81 00 	lds	r25, 0x0081
    2188:	0e 94 21 19 	call	0x3242	; 0x3242 <TMR1_voidSetCompareMatch>
}
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <Task_5>:
void Task_5(void)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	counter++;
    219a:	80 91 8d 00 	lds	r24, 0x008D
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	80 93 8d 00 	sts	0x008D, r24
	LCD_voidShift(LCD_u8_RIGHT);
    21a4:	8c e1       	ldi	r24, 0x1C	; 28
    21a6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <LCD_voidShift>
	if(counter == 6)
    21aa:	80 91 8d 00 	lds	r24, 0x008D
    21ae:	86 30       	cpi	r24, 0x06	; 6
    21b0:	61 f4       	brne	.+24     	; 0x21ca <Task_5+0x38>
	{
		LCD_voidClear();
    21b2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <LCD_voidClear>
		LCD_voidGoToXY(LCD_u8_LINE0,0);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LCD_voidGoToXY>
		LCD_voidSendStr("Abdelrahman");
    21be:	80 e6       	ldi	r24, 0x60	; 96
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidSendStr>
		counter = 0;
    21c6:	10 92 8d 00 	sts	0x008D, r1
	}
}
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <ISR_Func>:
void ISR_Func(void)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	static u8 Resumed = 1;
	if(Resumed == 1)
    21d8:	80 91 82 00 	lds	r24, 0x0082
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	31 f4       	brne	.+12     	; 0x21ec <ISR_Func+0x1c>
	{
		SuspendTask(4);
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <SuspendTask>
		Resumed =0;
    21e6:	10 92 82 00 	sts	0x0082, r1
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <ISR_Func+0x28>
	}
	else
	{
		ResumeTask(4);
    21ec:	84 e0       	ldi	r24, 0x04	; 4
    21ee:	0e 94 49 17 	call	0x2e92	; 0x2e92 <ResumeTask>
		Resumed =1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 93 82 00 	sts	0x0082, r24
	}
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <DIO_u8IntialValue>:
#include "private.h"
#include "config.h"
#include "interface.h"

void DIO_u8IntialValue    (void)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	PORTA_u8_REG = CONC(DIO_u8_PORTA_PIN7_INITIAL_VALUE ,DIO_u8_PORTA_PIN6_INITIAL_VALUE,DIO_u8_PORTA_PIN5_INITIAL_VALUE,DIO_u8_PORTA_PIN4_INITIAL_VALUE,
    2206:	eb e3       	ldi	r30, 0x3B	; 59
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	88 ef       	ldi	r24, 0xF8	; 248
    220c:	80 83       	st	Z, r24
			            DIO_u8_PORTA_PIN3_INITIAL_VALUE,DIO_u8_PORTA_PIN2_INITIAL_VALUE,DIO_u8_PORTA_PIN1_INITIAL_VALUE,DIO_u8_PORTA_PIN0_INITIAL_VALUE);
	PORTB_u8_REG = CONC(DIO_u8_PORTB_PIN7_INITIAL_VALUE ,DIO_u8_PORTB_PIN6_INITIAL_VALUE,DIO_u8_PORTB_PIN5_INITIAL_VALUE,DIO_u8_PORTB_PIN4_INITIAL_VALUE,
    220e:	e8 e3       	ldi	r30, 0x38	; 56
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	10 82       	st	Z, r1
                        DIO_u8_PORTB_PIN3_INITIAL_VALUE,DIO_u8_PORTB_PIN2_INITIAL_VALUE,DIO_u8_PORTB_PIN1_INITIAL_VALUE,DIO_u8_PORTB_PIN0_INITIAL_VALUE);
	PORTC_u8_REG = CONC(DIO_u8_PORTC_PIN7_INITIAL_VALUE ,DIO_u8_PORTC_PIN6_INITIAL_VALUE,DIO_u8_PORTC_PIN5_INITIAL_VALUE,DIO_u8_PORTC_PIN4_INITIAL_VALUE,
    2214:	e5 e3       	ldi	r30, 0x35	; 53
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	84 e0       	ldi	r24, 0x04	; 4
    221a:	80 83       	st	Z, r24
                         DIO_u8_PORTC_PIN3_INITIAL_VALUE,DIO_u8_PORTC_PIN2_INITIAL_VALUE,DIO_u8_PORTC_PIN1_INITIAL_VALUE,DIO_u8_PORTC_PIN0_INITIAL_VALUE);
	PORTD_u8_REG = CONC(DIO_u8_PORTD_PIN7_INITIAL_VALUE ,DIO_u8_PORTD_PIN6_INITIAL_VALUE,DIO_u8_PORTD_PIN5_INITIAL_VALUE,DIO_u8_PORTD_PIN4_INITIAL_VALUE,
    221c:	e2 e3       	ldi	r30, 0x32	; 50
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	80 83       	st	Z, r24
                         DIO_u8_PORTD_PIN3_INITIAL_VALUE,DIO_u8_PORTD_PIN2_INITIAL_VALUE,DIO_u8_PORTD_PIN1_INITIAL_VALUE,DIO_u8_PORTD_PIN0_INITIAL_VALUE);
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <DIO_u8IntialDirection>:
void DIO_u8IntialDirection    (void)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	DDRA_u8_REG = CONC(DIO_u8_PORTA_PIN7_INITIAL_DIRECTION,DIO_u8_PORTA_PIN6_INITIAL_DIRECTION,DIO_u8_PORTA_PIN5_INITIAL_DIRECTION,DIO_u8_PORTA_PIN4_INITIAL_DIRECTION,
    2232:	ea e3       	ldi	r30, 0x3A	; 58
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	8f e0       	ldi	r24, 0x0F	; 15
    2238:	80 83       	st	Z, r24
			           DIO_u8_PORTA_PIN3_INITIAL_DIRECTION,DIO_u8_PORTA_PIN2_INITIAL_DIRECTION,DIO_u8_PORTA_PIN1_INITIAL_DIRECTION,DIO_u8_PORTA_PIN0_INITIAL_DIRECTION);
	DDRB_u8_REG = CONC(DIO_u8_PORTB_PIN7_INITIAL_DIRECTION,DIO_u8_PORTB_PIN6_INITIAL_DIRECTION,DIO_u8_PORTB_PIN5_INITIAL_DIRECTION,DIO_u8_PORTB_PIN4_INITIAL_DIRECTION,
    223a:	e7 e3       	ldi	r30, 0x37	; 55
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	8f ef       	ldi	r24, 0xFF	; 255
    2240:	80 83       	st	Z, r24
	                   DIO_u8_PORTB_PIN3_INITIAL_DIRECTION,DIO_u8_PORTB_PIN2_INITIAL_DIRECTION,DIO_u8_PORTB_PIN1_INITIAL_DIRECTION,DIO_u8_PORTB_PIN0_INITIAL_DIRECTION);
	DDRC_u8_REG = CONC(DIO_u8_PORTC_PIN7_INITIAL_DIRECTION,DIO_u8_PORTC_PIN6_INITIAL_DIRECTION,DIO_u8_PORTC_PIN5_INITIAL_DIRECTION,DIO_u8_PORTC_PIN4_INITIAL_DIRECTION,
    2242:	e4 e3       	ldi	r30, 0x34	; 52
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	80 83       	st	Z, r24
	                   DIO_u8_PORTC_PIN3_INITIAL_DIRECTION,DIO_u8_PORTC_PIN2_INITIAL_DIRECTION,DIO_u8_PORTC_PIN1_INITIAL_DIRECTION,DIO_u8_PORTC_PIN0_INITIAL_DIRECTION);
	DDRD_u8_REG = CONC(DIO_u8_PORTD_PIN7_INITIAL_DIRECTION,DIO_u8_PORTD_PIN6_INITIAL_DIRECTION,DIO_u8_PORTD_PIN5_INITIAL_DIRECTION,DIO_u8_PORTD_PIN4_INITIAL_DIRECTION,
    224a:	e1 e3       	ldi	r30, 0x31	; 49
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	8b ef       	ldi	r24, 0xFB	; 251
    2250:	80 83       	st	Z, r24
	                   DIO_u8_PORTD_PIN3_INITIAL_DIRECTION,DIO_u8_PORTD_PIN2_INITIAL_DIRECTION,DIO_u8_PORTD_PIN1_INITIAL_DIRECTION,DIO_u8_PORTD_PIN0_INITIAL_DIRECTION);
}
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	2e 97       	sbiw	r28, 0x0e	; 14
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	8a 83       	std	Y+2, r24	; 0x02
    226e:	6b 83       	std	Y+3, r22	; 0x03
    2270:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnedState=OK;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_u8PinDirection <= DIO_u8_PIN_OUTPUT))                                                     
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	84 30       	cpi	r24, 0x04	; 4
    227a:	08 f0       	brcs	.+2      	; 0x227e <DIO_u8SetPinDirection+0x26>
    227c:	09 c1       	rjmp	.+530    	; 0x2490 <DIO_u8SetPinDirection+0x238>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	88 30       	cpi	r24, 0x08	; 8
    2282:	08 f0       	brcs	.+2      	; 0x2286 <DIO_u8SetPinDirection+0x2e>
    2284:	05 c1       	rjmp	.+522    	; 0x2490 <DIO_u8SetPinDirection+0x238>
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	08 f0       	brcs	.+2      	; 0x228e <DIO_u8SetPinDirection+0x36>
    228c:	01 c1       	rjmp	.+514    	; 0x2490 <DIO_u8SetPinDirection+0x238>
	{
		switch(Copy_u8PortId)
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3e 87       	std	Y+14, r19	; 0x0e
    2296:	2d 87       	std	Y+13, r18	; 0x0d
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	91 05       	cpc	r25, r1
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <DIO_u8SetPinDirection+0x4c>
    22a2:	4f c0       	rjmp	.+158    	; 0x2342 <DIO_u8SetPinDirection+0xea>
    22a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    22a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	31 05       	cpc	r19, r1
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <DIO_u8SetPinDirection+0x60>
    22ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	71 f0       	breq	.+28     	; 0x22d2 <DIO_u8SetPinDirection+0x7a>
    22b6:	ed c0       	rjmp	.+474    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
    22b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    22ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    22bc:	22 30       	cpi	r18, 0x02	; 2
    22be:	31 05       	cpc	r19, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <DIO_u8SetPinDirection+0x6c>
    22c2:	77 c0       	rjmp	.+238    	; 0x23b2 <DIO_u8SetPinDirection+0x15a>
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	91 05       	cpc	r25, r1
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <DIO_u8SetPinDirection+0x78>
    22ce:	a9 c0       	rjmp	.+338    	; 0x2422 <DIO_u8SetPinDirection+0x1ca>
    22d0:	e0 c0       	rjmp	.+448    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
		{
			case (DIO_u8_PORTA):
			{
				switch(Copy_u8PinDirection)
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	3c 87       	std	Y+12, r19	; 0x0c
    22da:	2b 87       	std	Y+11, r18	; 0x0b
    22dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    22de:	9c 85       	ldd	r25, Y+12	; 0x0c
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	d1 f0       	breq	.+52     	; 0x2318 <DIO_u8SetPinDirection+0xc0>
    22e4:	2b 85       	ldd	r18, Y+11	; 0x0b
    22e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    22e8:	21 30       	cpi	r18, 0x01	; 1
    22ea:	31 05       	cpc	r19, r1
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <DIO_u8SetPinDirection+0x98>
    22ee:	d1 c0       	rjmp	.+418    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				{
					case(DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRA_u8_REG,Copy_u8PinId);
    22f0:	aa e3       	ldi	r26, 0x3A	; 58
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ea e3       	ldi	r30, 0x3A	; 58
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 2e       	mov	r0, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <DIO_u8SetPinDirection+0xb6>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	0a 94       	dec	r0
    2310:	e2 f7       	brpl	.-8      	; 0x230a <DIO_u8SetPinDirection+0xb2>
    2312:	84 2b       	or	r24, r20
    2314:	8c 93       	st	X, r24
    2316:	bd c0       	rjmp	.+378    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRA_u8_REG,Copy_u8PinId);
    2318:	aa e3       	ldi	r26, 0x3A	; 58
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ea e3       	ldi	r30, 0x3A	; 58
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	48 2f       	mov	r20, r24
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 2e       	mov	r0, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <DIO_u8SetPinDirection+0xde>
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	0a 94       	dec	r0
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <DIO_u8SetPinDirection+0xda>
    233a:	80 95       	com	r24
    233c:	84 23       	and	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	a8 c0       	rjmp	.+336    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				}
				break;
			}
			case (DIO_u8_PORTB):
			{
				switch(Copy_u8PinDirection)
    2342:	8c 81       	ldd	r24, Y+4	; 0x04
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3a 87       	std	Y+10, r19	; 0x0a
    234a:	29 87       	std	Y+9, r18	; 0x09
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	d1 f0       	breq	.+52     	; 0x2388 <DIO_u8SetPinDirection+0x130>
    2354:	29 85       	ldd	r18, Y+9	; 0x09
    2356:	3a 85       	ldd	r19, Y+10	; 0x0a
    2358:	21 30       	cpi	r18, 0x01	; 1
    235a:	31 05       	cpc	r19, r1
    235c:	09 f0       	breq	.+2      	; 0x2360 <DIO_u8SetPinDirection+0x108>
    235e:	99 c0       	rjmp	.+306    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				{
					case (DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRB_u8_REG,Copy_u8PinId);
    2360:	a7 e3       	ldi	r26, 0x37	; 55
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e7 e3       	ldi	r30, 0x37	; 55
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	48 2f       	mov	r20, r24
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	02 2e       	mov	r0, r18
    2378:	02 c0       	rjmp	.+4      	; 0x237e <DIO_u8SetPinDirection+0x126>
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <DIO_u8SetPinDirection+0x122>
    2382:	84 2b       	or	r24, r20
    2384:	8c 93       	st	X, r24
    2386:	85 c0       	rjmp	.+266    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRB_u8_REG,Copy_u8PinId);
    2388:	a7 e3       	ldi	r26, 0x37	; 55
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e7 e3       	ldi	r30, 0x37	; 55
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <DIO_u8SetPinDirection+0x14e>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <DIO_u8SetPinDirection+0x14a>
    23aa:	80 95       	com	r24
    23ac:	84 23       	and	r24, r20
    23ae:	8c 93       	st	X, r24
    23b0:	70 c0       	rjmp	.+224    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTC):
			{
				switch(Copy_u8PinDirection)
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	38 87       	std	Y+8, r19	; 0x08
    23ba:	2f 83       	std	Y+7, r18	; 0x07
    23bc:	8f 81       	ldd	r24, Y+7	; 0x07
    23be:	98 85       	ldd	r25, Y+8	; 0x08
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	d1 f0       	breq	.+52     	; 0x23f8 <DIO_u8SetPinDirection+0x1a0>
    23c4:	2f 81       	ldd	r18, Y+7	; 0x07
    23c6:	38 85       	ldd	r19, Y+8	; 0x08
    23c8:	21 30       	cpi	r18, 0x01	; 1
    23ca:	31 05       	cpc	r19, r1
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <DIO_u8SetPinDirection+0x178>
    23ce:	61 c0       	rjmp	.+194    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				{
					case(DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
    23d0:	a4 e3       	ldi	r26, 0x34	; 52
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e4 e3       	ldi	r30, 0x34	; 52
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <DIO_u8SetPinDirection+0x196>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <DIO_u8SetPinDirection+0x192>
    23f2:	84 2b       	or	r24, r20
    23f4:	8c 93       	st	X, r24
    23f6:	4d c0       	rjmp	.+154    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRC_u8_REG,Copy_u8PinId);
    23f8:	a4 e3       	ldi	r26, 0x34	; 52
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e4 e3       	ldi	r30, 0x34	; 52
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	48 2f       	mov	r20, r24
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 2e       	mov	r0, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_u8SetPinDirection+0x1be>
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	0a 94       	dec	r0
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <DIO_u8SetPinDirection+0x1ba>
    241a:	80 95       	com	r24
    241c:	84 23       	and	r24, r20
    241e:	8c 93       	st	X, r24
    2420:	38 c0       	rjmp	.+112    	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTD):
			{
				switch(Copy_u8PinDirection)
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	3e 83       	std	Y+6, r19	; 0x06
    242a:	2d 83       	std	Y+5, r18	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	c9 f0       	breq	.+50     	; 0x2466 <DIO_u8SetPinDirection+0x20e>
    2434:	2d 81       	ldd	r18, Y+5	; 0x05
    2436:	3e 81       	ldd	r19, Y+6	; 0x06
    2438:	21 30       	cpi	r18, 0x01	; 1
    243a:	31 05       	cpc	r19, r1
    243c:	51 f5       	brne	.+84     	; 0x2492 <DIO_u8SetPinDirection+0x23a>
				{
					case(DIO_u8_PIN_OUTPUT):
					{
						SET_BIT(DDRD_u8_REG,Copy_u8PinId);
    243e:	a1 e3       	ldi	r26, 0x31	; 49
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e1 e3       	ldi	r30, 0x31	; 49
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	48 2f       	mov	r20, r24
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 2e       	mov	r0, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <DIO_u8SetPinDirection+0x204>
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	0a 94       	dec	r0
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <DIO_u8SetPinDirection+0x200>
    2460:	84 2b       	or	r24, r20
    2462:	8c 93       	st	X, r24
    2464:	16 c0       	rjmp	.+44     	; 0x2492 <DIO_u8SetPinDirection+0x23a>
						break;
					}
					case(DIO_u8_PIN_INPUT):
					{
						CLEAR_BIT(DDRD_u8_REG,Copy_u8PinId);
    2466:	a1 e3       	ldi	r26, 0x31	; 49
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e1 e3       	ldi	r30, 0x31	; 49
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	48 2f       	mov	r20, r24
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	02 2e       	mov	r0, r18
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <DIO_u8SetPinDirection+0x22c>
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	0a 94       	dec	r0
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <DIO_u8SetPinDirection+0x228>
    2488:	80 95       	com	r24
    248a:	84 23       	and	r24, r20
    248c:	8c 93       	st	X, r24
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <DIO_u8SetPinDirection+0x23a>
			}
		}
	}
	else
	{
		Local_u8ReturnedState = NOT_OK;
    2490:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
}
    2494:	2e 96       	adiw	r28, 0x0e	; 14
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	2e 97       	sbiw	r28, 0x0e	; 14
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	6b 83       	std	Y+3, r22	; 0x03
    24be:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnedState=OK;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_u8PinValue <= DIO_u8_PIN_HIGH))
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	84 30       	cpi	r24, 0x04	; 4
    24c8:	08 f0       	brcs	.+2      	; 0x24cc <DIO_u8SetPinValue+0x26>
    24ca:	09 c1       	rjmp	.+530    	; 0x26de <DIO_u8SetPinValue+0x238>
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	88 30       	cpi	r24, 0x08	; 8
    24d0:	08 f0       	brcs	.+2      	; 0x24d4 <DIO_u8SetPinValue+0x2e>
    24d2:	05 c1       	rjmp	.+522    	; 0x26de <DIO_u8SetPinValue+0x238>
    24d4:	8c 81       	ldd	r24, Y+4	; 0x04
    24d6:	82 30       	cpi	r24, 0x02	; 2
    24d8:	08 f0       	brcs	.+2      	; 0x24dc <DIO_u8SetPinValue+0x36>
    24da:	01 c1       	rjmp	.+514    	; 0x26de <DIO_u8SetPinValue+0x238>
	{
		switch(Copy_u8PortId)
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	3e 87       	std	Y+14, r19	; 0x0e
    24e4:	2d 87       	std	Y+13, r18	; 0x0d
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	91 05       	cpc	r25, r1
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <DIO_u8SetPinValue+0x4c>
    24f0:	4f c0       	rjmp	.+158    	; 0x2590 <DIO_u8SetPinValue+0xea>
    24f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    24f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    24f6:	22 30       	cpi	r18, 0x02	; 2
    24f8:	31 05       	cpc	r19, r1
    24fa:	2c f4       	brge	.+10     	; 0x2506 <DIO_u8SetPinValue+0x60>
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	71 f0       	breq	.+28     	; 0x2520 <DIO_u8SetPinValue+0x7a>
    2504:	ed c0       	rjmp	.+474    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
    2506:	2d 85       	ldd	r18, Y+13	; 0x0d
    2508:	3e 85       	ldd	r19, Y+14	; 0x0e
    250a:	22 30       	cpi	r18, 0x02	; 2
    250c:	31 05       	cpc	r19, r1
    250e:	09 f4       	brne	.+2      	; 0x2512 <DIO_u8SetPinValue+0x6c>
    2510:	77 c0       	rjmp	.+238    	; 0x2600 <DIO_u8SetPinValue+0x15a>
    2512:	8d 85       	ldd	r24, Y+13	; 0x0d
    2514:	9e 85       	ldd	r25, Y+14	; 0x0e
    2516:	83 30       	cpi	r24, 0x03	; 3
    2518:	91 05       	cpc	r25, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <DIO_u8SetPinValue+0x78>
    251c:	a9 c0       	rjmp	.+338    	; 0x2670 <DIO_u8SetPinValue+0x1ca>
    251e:	e0 c0       	rjmp	.+448    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
		{
			case(DIO_u8_PORTA):
			{
				switch(Copy_u8PinValue)
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	3c 87       	std	Y+12, r19	; 0x0c
    2528:	2b 87       	std	Y+11, r18	; 0x0b
    252a:	8b 85       	ldd	r24, Y+11	; 0x0b
    252c:	9c 85       	ldd	r25, Y+12	; 0x0c
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	d1 f0       	breq	.+52     	; 0x2566 <DIO_u8SetPinValue+0xc0>
    2532:	2b 85       	ldd	r18, Y+11	; 0x0b
    2534:	3c 85       	ldd	r19, Y+12	; 0x0c
    2536:	21 30       	cpi	r18, 0x01	; 1
    2538:	31 05       	cpc	r19, r1
    253a:	09 f0       	breq	.+2      	; 0x253e <DIO_u8SetPinValue+0x98>
    253c:	d1 c0       	rjmp	.+418    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    253e:	ab e3       	ldi	r26, 0x3B	; 59
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	eb e3       	ldi	r30, 0x3B	; 59
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	48 2f       	mov	r20, r24
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	02 2e       	mov	r0, r18
    2556:	02 c0       	rjmp	.+4      	; 0x255c <DIO_u8SetPinValue+0xb6>
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	0a 94       	dec	r0
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <DIO_u8SetPinValue+0xb2>
    2560:	84 2b       	or	r24, r20
    2562:	8c 93       	st	X, r24
    2564:	bd c0       	rjmp	.+378    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTA_u8_REG,Copy_u8PinId);
    2566:	ab e3       	ldi	r26, 0x3B	; 59
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	eb e3       	ldi	r30, 0x3B	; 59
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_u8SetPinValue+0xde>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <DIO_u8SetPinValue+0xda>
    2588:	80 95       	com	r24
    258a:	84 23       	and	r24, r20
    258c:	8c 93       	st	X, r24
    258e:	a8 c0       	rjmp	.+336    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTB):
			{
				switch(Copy_u8PinValue)
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	3a 87       	std	Y+10, r19	; 0x0a
    2598:	29 87       	std	Y+9, r18	; 0x09
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	d1 f0       	breq	.+52     	; 0x25d6 <DIO_u8SetPinValue+0x130>
    25a2:	29 85       	ldd	r18, Y+9	; 0x09
    25a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    25a6:	21 30       	cpi	r18, 0x01	; 1
    25a8:	31 05       	cpc	r19, r1
    25aa:	09 f0       	breq	.+2      	; 0x25ae <DIO_u8SetPinValue+0x108>
    25ac:	99 c0       	rjmp	.+306    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    25ae:	a8 e3       	ldi	r26, 0x38	; 56
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e8 e3       	ldi	r30, 0x38	; 56
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	48 2f       	mov	r20, r24
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	02 2e       	mov	r0, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <DIO_u8SetPinValue+0x126>
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	0a 94       	dec	r0
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <DIO_u8SetPinValue+0x122>
    25d0:	84 2b       	or	r24, r20
    25d2:	8c 93       	st	X, r24
    25d4:	85 c0       	rjmp	.+266    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTB_u8_REG,Copy_u8PinId);
    25d6:	a8 e3       	ldi	r26, 0x38	; 56
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e8 e3       	ldi	r30, 0x38	; 56
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	48 2f       	mov	r20, r24
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	02 2e       	mov	r0, r18
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <DIO_u8SetPinValue+0x14e>
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	0a 94       	dec	r0
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <DIO_u8SetPinValue+0x14a>
    25f8:	80 95       	com	r24
    25fa:	84 23       	and	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	70 c0       	rjmp	.+224    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTC):
			{
				switch(Copy_u8PinValue)
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	38 87       	std	Y+8, r19	; 0x08
    2608:	2f 83       	std	Y+7, r18	; 0x07
    260a:	8f 81       	ldd	r24, Y+7	; 0x07
    260c:	98 85       	ldd	r25, Y+8	; 0x08
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	d1 f0       	breq	.+52     	; 0x2646 <DIO_u8SetPinValue+0x1a0>
    2612:	2f 81       	ldd	r18, Y+7	; 0x07
    2614:	38 85       	ldd	r19, Y+8	; 0x08
    2616:	21 30       	cpi	r18, 0x01	; 1
    2618:	31 05       	cpc	r19, r1
    261a:	09 f0       	breq	.+2      	; 0x261e <DIO_u8SetPinValue+0x178>
    261c:	61 c0       	rjmp	.+194    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    261e:	a5 e3       	ldi	r26, 0x35	; 53
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e3       	ldi	r30, 0x35	; 53
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	48 2f       	mov	r20, r24
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	02 2e       	mov	r0, r18
    2636:	02 c0       	rjmp	.+4      	; 0x263c <DIO_u8SetPinValue+0x196>
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	0a 94       	dec	r0
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <DIO_u8SetPinValue+0x192>
    2640:	84 2b       	or	r24, r20
    2642:	8c 93       	st	X, r24
    2644:	4d c0       	rjmp	.+154    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTC_u8_REG,Copy_u8PinId);
    2646:	a5 e3       	ldi	r26, 0x35	; 53
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e5 e3       	ldi	r30, 0x35	; 53
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	48 2f       	mov	r20, r24
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	02 2e       	mov	r0, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <DIO_u8SetPinValue+0x1be>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	0a 94       	dec	r0
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <DIO_u8SetPinValue+0x1ba>
    2668:	80 95       	com	r24
    266a:	84 23       	and	r24, r20
    266c:	8c 93       	st	X, r24
    266e:	38 c0       	rjmp	.+112    	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				}
				break;
			}
			case(DIO_u8_PORTD):
			{
				switch(Copy_u8PinValue)
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	3e 83       	std	Y+6, r19	; 0x06
    2678:	2d 83       	std	Y+5, r18	; 0x05
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	c9 f0       	breq	.+50     	; 0x26b4 <DIO_u8SetPinValue+0x20e>
    2682:	2d 81       	ldd	r18, Y+5	; 0x05
    2684:	3e 81       	ldd	r19, Y+6	; 0x06
    2686:	21 30       	cpi	r18, 0x01	; 1
    2688:	31 05       	cpc	r19, r1
    268a:	51 f5       	brne	.+84     	; 0x26e0 <DIO_u8SetPinValue+0x23a>
				{
					case(DIO_u8_PIN_HIGH):
					{
						SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    268c:	a2 e3       	ldi	r26, 0x32	; 50
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e2 e3       	ldi	r30, 0x32	; 50
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	48 2f       	mov	r20, r24
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	02 2e       	mov	r0, r18
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <DIO_u8SetPinValue+0x204>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	0a 94       	dec	r0
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <DIO_u8SetPinValue+0x200>
    26ae:	84 2b       	or	r24, r20
    26b0:	8c 93       	st	X, r24
    26b2:	16 c0       	rjmp	.+44     	; 0x26e0 <DIO_u8SetPinValue+0x23a>
						break;
					}
					case(DIO_u8_PIN_LOW):
					{
						CLEAR_BIT(PORTD_u8_REG,Copy_u8PinId);
    26b4:	a2 e3       	ldi	r26, 0x32	; 50
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e2 e3       	ldi	r30, 0x32	; 50
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	48 2f       	mov	r20, r24
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	02 2e       	mov	r0, r18
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_u8SetPinValue+0x22c>
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	0a 94       	dec	r0
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <DIO_u8SetPinValue+0x228>
    26d6:	80 95       	com	r24
    26d8:	84 23       	and	r24, r20
    26da:	8c 93       	st	X, r24
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <DIO_u8SetPinValue+0x23a>
			}
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    26de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e2:	2e 96       	adiw	r28, 0x0e	; 14
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_pu8ReturnedPinValue)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	27 97       	sbiw	r28, 0x07	; 7
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	8a 83       	std	Y+2, r24	; 0x02
    270a:	6b 83       	std	Y+3, r22	; 0x03
    270c:	5d 83       	std	Y+5, r21	; 0x05
    270e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnedState=OK;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_pu8ReturnedPinValue != NULL))
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	84 30       	cpi	r24, 0x04	; 4
    2718:	08 f0       	brcs	.+2      	; 0x271c <DIO_u8GetPinValue+0x28>
    271a:	7a c0       	rjmp	.+244    	; 0x2810 <DIO_u8GetPinValue+0x11c>
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	88 30       	cpi	r24, 0x08	; 8
    2720:	08 f0       	brcs	.+2      	; 0x2724 <DIO_u8GetPinValue+0x30>
    2722:	76 c0       	rjmp	.+236    	; 0x2810 <DIO_u8GetPinValue+0x11c>
    2724:	8c 81       	ldd	r24, Y+4	; 0x04
    2726:	9d 81       	ldd	r25, Y+5	; 0x05
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	09 f4       	brne	.+2      	; 0x272e <DIO_u8GetPinValue+0x3a>
    272c:	71 c0       	rjmp	.+226    	; 0x2810 <DIO_u8GetPinValue+0x11c>
	{
		switch(Copy_u8PortId)
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	3f 83       	std	Y+7, r19	; 0x07
    2736:	2e 83       	std	Y+6, r18	; 0x06
    2738:	4e 81       	ldd	r20, Y+6	; 0x06
    273a:	5f 81       	ldd	r21, Y+7	; 0x07
    273c:	41 30       	cpi	r20, 0x01	; 1
    273e:	51 05       	cpc	r21, r1
    2740:	59 f1       	breq	.+86     	; 0x2798 <DIO_u8GetPinValue+0xa4>
    2742:	8e 81       	ldd	r24, Y+6	; 0x06
    2744:	9f 81       	ldd	r25, Y+7	; 0x07
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	91 05       	cpc	r25, r1
    274a:	34 f4       	brge	.+12     	; 0x2758 <DIO_u8GetPinValue+0x64>
    274c:	2e 81       	ldd	r18, Y+6	; 0x06
    274e:	3f 81       	ldd	r19, Y+7	; 0x07
    2750:	21 15       	cp	r18, r1
    2752:	31 05       	cpc	r19, r1
    2754:	69 f0       	breq	.+26     	; 0x2770 <DIO_u8GetPinValue+0x7c>
    2756:	5d c0       	rjmp	.+186    	; 0x2812 <DIO_u8GetPinValue+0x11e>
    2758:	4e 81       	ldd	r20, Y+6	; 0x06
    275a:	5f 81       	ldd	r21, Y+7	; 0x07
    275c:	42 30       	cpi	r20, 0x02	; 2
    275e:	51 05       	cpc	r21, r1
    2760:	79 f1       	breq	.+94     	; 0x27c0 <DIO_u8GetPinValue+0xcc>
    2762:	8e 81       	ldd	r24, Y+6	; 0x06
    2764:	9f 81       	ldd	r25, Y+7	; 0x07
    2766:	83 30       	cpi	r24, 0x03	; 3
    2768:	91 05       	cpc	r25, r1
    276a:	09 f4       	brne	.+2      	; 0x276e <DIO_u8GetPinValue+0x7a>
    276c:	3d c0       	rjmp	.+122    	; 0x27e8 <DIO_u8GetPinValue+0xf4>
    276e:	51 c0       	rjmp	.+162    	; 0x2812 <DIO_u8GetPinValue+0x11e>
		{
			case(DIO_u8_PORTA):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PINA_u8_REG,Copy_u8PinId);
    2770:	e9 e3       	ldi	r30, 0x39	; 57
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a9 01       	movw	r20, r18
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <DIO_u8GetPinValue+0x94>
    2784:	55 95       	asr	r21
    2786:	47 95       	ror	r20
    2788:	8a 95       	dec	r24
    278a:	e2 f7       	brpl	.-8      	; 0x2784 <DIO_u8GetPinValue+0x90>
    278c:	ca 01       	movw	r24, r20
    278e:	81 70       	andi	r24, 0x01	; 1
    2790:	ec 81       	ldd	r30, Y+4	; 0x04
    2792:	fd 81       	ldd	r31, Y+5	; 0x05
    2794:	80 83       	st	Z, r24
    2796:	3d c0       	rjmp	.+122    	; 0x2812 <DIO_u8GetPinValue+0x11e>
				break;
			}
			case(DIO_u8_PORTB):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PINB_u8_REG,Copy_u8PinId);
    2798:	e6 e3       	ldi	r30, 0x36	; 54
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a9 01       	movw	r20, r18
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <DIO_u8GetPinValue+0xbc>
    27ac:	55 95       	asr	r21
    27ae:	47 95       	ror	r20
    27b0:	8a 95       	dec	r24
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <DIO_u8GetPinValue+0xb8>
    27b4:	ca 01       	movw	r24, r20
    27b6:	81 70       	andi	r24, 0x01	; 1
    27b8:	ec 81       	ldd	r30, Y+4	; 0x04
    27ba:	fd 81       	ldd	r31, Y+5	; 0x05
    27bc:	80 83       	st	Z, r24
    27be:	29 c0       	rjmp	.+82     	; 0x2812 <DIO_u8GetPinValue+0x11e>
				break;
			}
			case(DIO_u8_PORTC):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PINC_u8_REG,Copy_u8PinId);
    27c0:	e3 e3       	ldi	r30, 0x33	; 51
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	a9 01       	movw	r20, r18
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <DIO_u8GetPinValue+0xe4>
    27d4:	55 95       	asr	r21
    27d6:	47 95       	ror	r20
    27d8:	8a 95       	dec	r24
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <DIO_u8GetPinValue+0xe0>
    27dc:	ca 01       	movw	r24, r20
    27de:	81 70       	andi	r24, 0x01	; 1
    27e0:	ec 81       	ldd	r30, Y+4	; 0x04
    27e2:	fd 81       	ldd	r31, Y+5	; 0x05
    27e4:	80 83       	st	Z, r24
    27e6:	15 c0       	rjmp	.+42     	; 0x2812 <DIO_u8GetPinValue+0x11e>
				break;
			}
			case(DIO_u8_PORTD):
			{
				*Copy_pu8ReturnedPinValue=GET_BIT(PIND_u8_REG,Copy_u8PinId);
    27e8:	e0 e3       	ldi	r30, 0x30	; 48
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a9 01       	movw	r20, r18
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <DIO_u8GetPinValue+0x10c>
    27fc:	55 95       	asr	r21
    27fe:	47 95       	ror	r20
    2800:	8a 95       	dec	r24
    2802:	e2 f7       	brpl	.-8      	; 0x27fc <DIO_u8GetPinValue+0x108>
    2804:	ca 01       	movw	r24, r20
    2806:	81 70       	andi	r24, 0x01	; 1
    2808:	ec 81       	ldd	r30, Y+4	; 0x04
    280a:	fd 81       	ldd	r31, Y+5	; 0x05
    280c:	80 83       	st	Z, r24
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <DIO_u8GetPinValue+0x11e>
			}
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    2810:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
}
    2814:	27 96       	adiw	r28, 0x07	; 7
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId,u8 Copy_u8PortDirection)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	2d 97       	sbiw	r28, 0x0d	; 13
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	8a 83       	std	Y+2, r24	; 0x02
    283c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnedState=OK;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_u8PortDirection <= DIO_u8_PORT_OUTPUT))
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	84 30       	cpi	r24, 0x04	; 4
    2846:	08 f0       	brcs	.+2      	; 0x284a <DIO_u8SetPortDirection+0x24>
    2848:	7d c0       	rjmp	.+250    	; 0x2944 <DIO_u8SetPortDirection+0x11e>
	{
		switch(Copy_u8PortId)
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	3d 87       	std	Y+13, r19	; 0x0d
    2852:	2c 87       	std	Y+12, r18	; 0x0c
    2854:	8c 85       	ldd	r24, Y+12	; 0x0c
    2856:	9d 85       	ldd	r25, Y+13	; 0x0d
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	91 05       	cpc	r25, r1
    285c:	71 f1       	breq	.+92     	; 0x28ba <DIO_u8SetPortDirection+0x94>
    285e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2860:	3d 85       	ldd	r19, Y+13	; 0x0d
    2862:	22 30       	cpi	r18, 0x02	; 2
    2864:	31 05       	cpc	r19, r1
    2866:	2c f4       	brge	.+10     	; 0x2872 <DIO_u8SetPortDirection+0x4c>
    2868:	8c 85       	ldd	r24, Y+12	; 0x0c
    286a:	9d 85       	ldd	r25, Y+13	; 0x0d
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f0       	breq	.+26     	; 0x288a <DIO_u8SetPortDirection+0x64>
    2870:	6a c0       	rjmp	.+212    	; 0x2946 <DIO_u8SetPortDirection+0x120>
    2872:	2c 85       	ldd	r18, Y+12	; 0x0c
    2874:	3d 85       	ldd	r19, Y+13	; 0x0d
    2876:	22 30       	cpi	r18, 0x02	; 2
    2878:	31 05       	cpc	r19, r1
    287a:	b1 f1       	breq	.+108    	; 0x28e8 <DIO_u8SetPortDirection+0xc2>
    287c:	8c 85       	ldd	r24, Y+12	; 0x0c
    287e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2880:	83 30       	cpi	r24, 0x03	; 3
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <DIO_u8SetPortDirection+0x62>
    2886:	47 c0       	rjmp	.+142    	; 0x2916 <DIO_u8SetPortDirection+0xf0>
    2888:	5e c0       	rjmp	.+188    	; 0x2946 <DIO_u8SetPortDirection+0x120>
		{
			case(DIO_u8_PORTA):
			{
				switch(Copy_u8PortDirection)
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	3b 87       	std	Y+11, r19	; 0x0b
    2892:	2a 87       	std	Y+10, r18	; 0x0a
    2894:	8a 85       	ldd	r24, Y+10	; 0x0a
    2896:	9b 85       	ldd	r25, Y+11	; 0x0b
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	59 f0       	breq	.+22     	; 0x28b2 <DIO_u8SetPortDirection+0x8c>
    289c:	2a 85       	ldd	r18, Y+10	; 0x0a
    289e:	3b 85       	ldd	r19, Y+11	; 0x0b
    28a0:	2f 3f       	cpi	r18, 0xFF	; 255
    28a2:	31 05       	cpc	r19, r1
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <DIO_u8SetPortDirection+0x82>
    28a6:	4f c0       	rjmp	.+158    	; 0x2946 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRA_u8_REG=DIO_u8_PORT_OUTPUT;
    28a8:	ea e3       	ldi	r30, 0x3A	; 58
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	80 83       	st	Z, r24
    28b0:	4a c0       	rjmp	.+148    	; 0x2946 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRA_u8_REG=DIO_u8_PORT_INPUT;
    28b2:	ea e3       	ldi	r30, 0x3A	; 58
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	10 82       	st	Z, r1
    28b8:	46 c0       	rjmp	.+140    	; 0x2946 <DIO_u8SetPortDirection+0x120>
				}
				break;
			}
			case(DIO_u8_PORTB):
			{
				switch(Copy_u8PortDirection)
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	39 87       	std	Y+9, r19	; 0x09
    28c2:	28 87       	std	Y+8, r18	; 0x08
    28c4:	88 85       	ldd	r24, Y+8	; 0x08
    28c6:	99 85       	ldd	r25, Y+9	; 0x09
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	51 f0       	breq	.+20     	; 0x28e0 <DIO_u8SetPortDirection+0xba>
    28cc:	28 85       	ldd	r18, Y+8	; 0x08
    28ce:	39 85       	ldd	r19, Y+9	; 0x09
    28d0:	2f 3f       	cpi	r18, 0xFF	; 255
    28d2:	31 05       	cpc	r19, r1
    28d4:	c1 f5       	brne	.+112    	; 0x2946 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRB_u8_REG=DIO_u8_PORT_OUTPUT;
    28d6:	e7 e3       	ldi	r30, 0x37	; 55
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	8f ef       	ldi	r24, 0xFF	; 255
    28dc:	80 83       	st	Z, r24
    28de:	33 c0       	rjmp	.+102    	; 0x2946 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRB_u8_REG=DIO_u8_PORT_INPUT;
    28e0:	e7 e3       	ldi	r30, 0x37	; 55
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	10 82       	st	Z, r1
    28e6:	2f c0       	rjmp	.+94     	; 0x2946 <DIO_u8SetPortDirection+0x120>
				}
				break;
			}
			case(DIO_u8_PORTC):
			{
				switch(Copy_u8PortDirection)
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3f 83       	std	Y+7, r19	; 0x07
    28f0:	2e 83       	std	Y+6, r18	; 0x06
    28f2:	8e 81       	ldd	r24, Y+6	; 0x06
    28f4:	9f 81       	ldd	r25, Y+7	; 0x07
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	51 f0       	breq	.+20     	; 0x290e <DIO_u8SetPortDirection+0xe8>
    28fa:	2e 81       	ldd	r18, Y+6	; 0x06
    28fc:	3f 81       	ldd	r19, Y+7	; 0x07
    28fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2900:	31 05       	cpc	r19, r1
    2902:	09 f5       	brne	.+66     	; 0x2946 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRC_u8_REG=DIO_u8_PORT_OUTPUT;
    2904:	e4 e3       	ldi	r30, 0x34	; 52
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	80 83       	st	Z, r24
    290c:	1c c0       	rjmp	.+56     	; 0x2946 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRC_u8_REG=DIO_u8_PORT_INPUT;
    290e:	e4 e3       	ldi	r30, 0x34	; 52
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	10 82       	st	Z, r1
    2914:	18 c0       	rjmp	.+48     	; 0x2946 <DIO_u8SetPortDirection+0x120>
				}
				break;
			}
			case(DIO_u8_PORTD):
			{
				switch(Copy_u8PortDirection)
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	3d 83       	std	Y+5, r19	; 0x05
    291e:	2c 83       	std	Y+4, r18	; 0x04
    2920:	8c 81       	ldd	r24, Y+4	; 0x04
    2922:	9d 81       	ldd	r25, Y+5	; 0x05
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	51 f0       	breq	.+20     	; 0x293c <DIO_u8SetPortDirection+0x116>
    2928:	2c 81       	ldd	r18, Y+4	; 0x04
    292a:	3d 81       	ldd	r19, Y+5	; 0x05
    292c:	2f 3f       	cpi	r18, 0xFF	; 255
    292e:	31 05       	cpc	r19, r1
    2930:	51 f4       	brne	.+20     	; 0x2946 <DIO_u8SetPortDirection+0x120>
				{
					case(DIO_u8_PORT_OUTPUT):
					{
						DDRD_u8_REG=DIO_u8_PORT_OUTPUT;
    2932:	e1 e3       	ldi	r30, 0x31	; 49
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	80 83       	st	Z, r24
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <DIO_u8SetPortDirection+0x120>
						break;
					}
					case(DIO_u8_PORT_INPUT):
					{
						DDRD_u8_REG=DIO_u8_PORT_INPUT;
    293c:	e1 e3       	ldi	r30, 0x31	; 49
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	10 82       	st	Z, r1
    2942:	01 c0       	rjmp	.+2      	; 0x2946 <DIO_u8SetPortDirection+0x120>
	          
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    2944:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    2946:	89 81       	ldd	r24, Y+1	; 0x01
}
    2948:	2d 96       	adiw	r28, 0x0d	; 13
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <DIO_u8SetPortValue+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <DIO_u8SetPortValue+0x8>
    2962:	0f 92       	push	r0
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	8a 83       	std	Y+2, r24	; 0x02
    296a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnedState=OK;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= DIO_u8_PORTD)
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	84 30       	cpi	r24, 0x04	; 4
    2974:	98 f5       	brcc	.+102    	; 0x29dc <DIO_u8SetPortValue+0x82>
	{
		switch(Copy_u8PortId)
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	3d 83       	std	Y+5, r19	; 0x05
    297e:	2c 83       	std	Y+4, r18	; 0x04
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	9d 81       	ldd	r25, Y+5	; 0x05
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	91 05       	cpc	r25, r1
    2988:	d1 f0       	breq	.+52     	; 0x29be <DIO_u8SetPortValue+0x64>
    298a:	2c 81       	ldd	r18, Y+4	; 0x04
    298c:	3d 81       	ldd	r19, Y+5	; 0x05
    298e:	22 30       	cpi	r18, 0x02	; 2
    2990:	31 05       	cpc	r19, r1
    2992:	2c f4       	brge	.+10     	; 0x299e <DIO_u8SetPortValue+0x44>
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	9d 81       	ldd	r25, Y+5	; 0x05
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	61 f0       	breq	.+24     	; 0x29b4 <DIO_u8SetPortValue+0x5a>
    299c:	20 c0       	rjmp	.+64     	; 0x29de <DIO_u8SetPortValue+0x84>
    299e:	2c 81       	ldd	r18, Y+4	; 0x04
    29a0:	3d 81       	ldd	r19, Y+5	; 0x05
    29a2:	22 30       	cpi	r18, 0x02	; 2
    29a4:	31 05       	cpc	r19, r1
    29a6:	81 f0       	breq	.+32     	; 0x29c8 <DIO_u8SetPortValue+0x6e>
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	9d 81       	ldd	r25, Y+5	; 0x05
    29ac:	83 30       	cpi	r24, 0x03	; 3
    29ae:	91 05       	cpc	r25, r1
    29b0:	81 f0       	breq	.+32     	; 0x29d2 <DIO_u8SetPortValue+0x78>
    29b2:	15 c0       	rjmp	.+42     	; 0x29de <DIO_u8SetPortValue+0x84>
		{
			case(DIO_u8_PORTA):
			{
				PORTA_u8_REG=Copy_u8PortValue;
    29b4:	eb e3       	ldi	r30, 0x3B	; 59
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	80 83       	st	Z, r24
    29bc:	10 c0       	rjmp	.+32     	; 0x29de <DIO_u8SetPortValue+0x84>
				break;
			}
			case(DIO_u8_PORTB):
			{
				PORTB_u8_REG=Copy_u8PortValue;
    29be:	e8 e3       	ldi	r30, 0x38	; 56
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	80 83       	st	Z, r24
    29c6:	0b c0       	rjmp	.+22     	; 0x29de <DIO_u8SetPortValue+0x84>
				break;
			}
			case(DIO_u8_PORTC):
			{
				PORTC_u8_REG=Copy_u8PortValue;
    29c8:	e5 e3       	ldi	r30, 0x35	; 53
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	80 83       	st	Z, r24
    29d0:	06 c0       	rjmp	.+12     	; 0x29de <DIO_u8SetPortValue+0x84>
				break;
			}
			case(DIO_u8_PORTD):
			{
				PORTD_u8_REG=Copy_u8PortValue;
    29d2:	e2 e3       	ldi	r30, 0x32	; 50
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	80 83       	st	Z, r24
    29da:	01 c0       	rjmp	.+2      	; 0x29de <DIO_u8SetPortValue+0x84>
			}
		}
	}
	else
	{
		Local_u8ReturnedState=NOT_OK;
    29dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnedState;
    29de:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8PortId,u8 *Copy_pu8ReturnedPortValue)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <DIO_u8GetPortValue+0x6>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <DIO_u8GetPortValue+0x8>
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <DIO_u8GetPortValue+0xa>
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	7c 83       	std	Y+4, r23	; 0x04
    2a02:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ReturnedState=OK;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD)&&(Copy_pu8ReturnedPortValue != NULL))
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	84 30       	cpi	r24, 0x04	; 4
    2a0c:	08 f0       	brcs	.+2      	; 0x2a10 <DIO_u8GetPortValue+0x20>
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <DIO_u8GetPortValue+0x9e>
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	d9 f1       	breq	.+118    	; 0x2a8e <DIO_u8GetPortValue+0x9e>
	{
		switch(Copy_u8PortId)
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	3e 83       	std	Y+6, r19	; 0x06
    2a20:	2d 83       	std	Y+5, r18	; 0x05
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	91 05       	cpc	r25, r1
    2a2a:	e1 f0       	breq	.+56     	; 0x2a64 <DIO_u8GetPortValue+0x74>
    2a2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a2e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a30:	22 30       	cpi	r18, 0x02	; 2
    2a32:	31 05       	cpc	r19, r1
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <DIO_u8GetPortValue+0x50>
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	61 f0       	breq	.+24     	; 0x2a56 <DIO_u8GetPortValue+0x66>
    2a3e:	28 c0       	rjmp	.+80     	; 0x2a90 <DIO_u8GetPortValue+0xa0>
    2a40:	2d 81       	ldd	r18, Y+5	; 0x05
    2a42:	3e 81       	ldd	r19, Y+6	; 0x06
    2a44:	22 30       	cpi	r18, 0x02	; 2
    2a46:	31 05       	cpc	r19, r1
    2a48:	a1 f0       	breq	.+40     	; 0x2a72 <DIO_u8GetPortValue+0x82>
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	83 30       	cpi	r24, 0x03	; 3
    2a50:	91 05       	cpc	r25, r1
    2a52:	b1 f0       	breq	.+44     	; 0x2a80 <DIO_u8GetPortValue+0x90>
    2a54:	1d c0       	rjmp	.+58     	; 0x2a90 <DIO_u8GetPortValue+0xa0>
		{
			case(DIO_u8_PORTA):
			{
				*Copy_pu8ReturnedPortValue=PINA_u8_REG;
    2a56:	e9 e3       	ldi	r30, 0x39	; 57
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a60:	80 83       	st	Z, r24
    2a62:	16 c0       	rjmp	.+44     	; 0x2a90 <DIO_u8GetPortValue+0xa0>
				break;
			}
			case(DIO_u8_PORTB):
			{
				*Copy_pu8ReturnedPortValue=PINB_u8_REG;
    2a64:	e6 e3       	ldi	r30, 0x36	; 54
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6e:	80 83       	st	Z, r24
    2a70:	0f c0       	rjmp	.+30     	; 0x2a90 <DIO_u8GetPortValue+0xa0>
				break;
			}
			case(DIO_u8_PORTC):
			{
				*Copy_pu8ReturnedPortValue=PINC_u8_REG;
    2a72:	e3 e3       	ldi	r30, 0x33	; 51
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7c:	80 83       	st	Z, r24
    2a7e:	08 c0       	rjmp	.+16     	; 0x2a90 <DIO_u8GetPortValue+0xa0>
				break;
			}
			case(DIO_u8_PORTD):
			{
				*Copy_pu8ReturnedPortValue=PIND_u8_REG;
    2a80:	e0 e3       	ldi	r30, 0x30	; 48
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	eb 81       	ldd	r30, Y+3	; 0x03
    2a88:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8a:	80 83       	st	Z, r24
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <DIO_u8GetPortValue+0xa0>
			}
		}
	}
	else
	{
		local_u8ReturnedState=NOT_OK;
    2a8e:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ReturnedState;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a92:	26 96       	adiw	r28, 0x06	; 6
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <DIO_u8TogglePortValue>:
void DIO_u8TogglePortValue(u8 Copy_u8PortId)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <DIO_u8TogglePortValue+0x6>
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <DIO_u8TogglePortValue+0x8>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8TempValue;
	switch(Copy_u8PortId)
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	3c 83       	std	Y+4, r19	; 0x04
    2aba:	2b 83       	std	Y+3, r18	; 0x03
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	31 f1       	breq	.+76     	; 0x2b12 <DIO_u8TogglePortValue+0x6e>
    2ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aca:	22 30       	cpi	r18, 0x02	; 2
    2acc:	31 05       	cpc	r19, r1
    2ace:	2c f4       	brge	.+10     	; 0x2ada <DIO_u8TogglePortValue+0x36>
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	61 f0       	breq	.+24     	; 0x2af0 <DIO_u8TogglePortValue+0x4c>
    2ad8:	4e c0       	rjmp	.+156    	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
    2ada:	2b 81       	ldd	r18, Y+3	; 0x03
    2adc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	41 f1       	breq	.+80     	; 0x2b34 <DIO_u8TogglePortValue+0x90>
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	83 30       	cpi	r24, 0x03	; 3
    2aea:	91 05       	cpc	r25, r1
    2aec:	a1 f1       	breq	.+104    	; 0x2b56 <DIO_u8TogglePortValue+0xb2>
    2aee:	43 c0       	rjmp	.+134    	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
	{
		case(DIO_u8_PORTA):
		{
			Local_u8TempValue = PINA_u8_REG;
    2af0:	e9 e3       	ldi	r30, 0x39	; 57
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	8f 3f       	cpi	r24, 0xFF	; 255
    2afc:	29 f4       	brne	.+10     	; 0x2b08 <DIO_u8TogglePortValue+0x64>
			{
				DIO_u8SetPortValue(DIO_u8_PORTA,0x00);
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b06:	37 c0       	rjmp	.+110    	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTA,0xff);
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	6f ef       	ldi	r22, 0xFF	; 255
    2b0c:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b10:	32 c0       	rjmp	.+100    	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			break;
		}
		case(DIO_u8_PORTB):
		{
			Local_u8TempValue = PINB_u8_REG;
    2b12:	e6 e3       	ldi	r30, 0x36	; 54
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b1e:	29 f4       	brne	.+10     	; 0x2b2a <DIO_u8TogglePortValue+0x86>
			{
				DIO_u8SetPortValue(DIO_u8_PORTB,0x00);
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b28:	26 c0       	rjmp	.+76     	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTB,0xff);
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	6f ef       	ldi	r22, 0xFF	; 255
    2b2e:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b32:	21 c0       	rjmp	.+66     	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			break;
		}
		case(DIO_u8_PORTC):
		{
			Local_u8TempValue = PINC_u8_REG;
    2b34:	e3 e3       	ldi	r30, 0x33	; 51
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b40:	29 f4       	brne	.+10     	; 0x2b4c <DIO_u8TogglePortValue+0xa8>
			{
				DIO_u8SetPortValue(DIO_u8_PORTC,0x00);
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b4a:	15 c0       	rjmp	.+42     	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTC,0xff);
    2b4c:	82 e0       	ldi	r24, 0x02	; 2
    2b4e:	6f ef       	ldi	r22, 0xFF	; 255
    2b50:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b54:	10 c0       	rjmp	.+32     	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			break;
		}
		case(DIO_u8_PORTD):
		{
			Local_u8TempValue = PIND_u8_REG;
    2b56:	e0 e3       	ldi	r30, 0x30	; 48
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8TempValue == 0xff)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	8f 3f       	cpi	r24, 0xFF	; 255
    2b62:	29 f4       	brne	.+10     	; 0x2b6e <DIO_u8TogglePortValue+0xca>
			{
				DIO_u8SetPortValue(DIO_u8_PORTD,0x00);
    2b64:	83 e0       	ldi	r24, 0x03	; 3
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
    2b6c:	04 c0       	rjmp	.+8      	; 0x2b76 <DIO_u8TogglePortValue+0xd2>
			}
			else
			{
				DIO_u8SetPortValue(DIO_u8_PORTD,0xff);
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	6f ef       	ldi	r22, 0xFF	; 255
    2b72:	0e 94 ad 14 	call	0x295a	; 0x295a <DIO_u8SetPortValue>
			}
			break;
		}
	}
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <RTO_u8CreateTask>:
#include "rto_interface.h"

TCB RTO_aTCBNumberOfTasks[RTO_u8_MAX_PRIORITY];

u8 RTO_u8CreateTask(u8 Copy_u8Priority,u32 Copy_u8Priodicity,u32 Copy_u8FirstDelay,void (*Copy_voidPF)(void),u8 Copy_u8TaskState)
{
    2b84:	cf 92       	push	r12
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	2d 97       	sbiw	r28, 0x0d	; 13
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	8a 83       	std	Y+2, r24	; 0x02
    2ba4:	4b 83       	std	Y+3, r20	; 0x03
    2ba6:	5c 83       	std	Y+4, r21	; 0x04
    2ba8:	6d 83       	std	Y+5, r22	; 0x05
    2baa:	7e 83       	std	Y+6, r23	; 0x06
    2bac:	0f 83       	std	Y+7, r16	; 0x07
    2bae:	18 87       	std	Y+8, r17	; 0x08
    2bb0:	29 87       	std	Y+9, r18	; 0x09
    2bb2:	3a 87       	std	Y+10, r19	; 0x0a
    2bb4:	fc 86       	std	Y+12, r15	; 0x0c
    2bb6:	eb 86       	std	Y+11, r14	; 0x0b
    2bb8:	cd 86       	std	Y+13, r12	; 0x0d
	u8 Local_u8ReturnedState=OK;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Priority < RTO_u8_MAX_PRIORITY)
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	86 30       	cpi	r24, 0x06	; 6
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <RTO_u8CreateTask+0x42>
    2bc4:	5f c0       	rjmp	.+190    	; 0x2c84 <RTO_u8CreateTask+0x100>
	{
		RTO_aTCBNumberOfTasks[Copy_u8Priority].periodicity=Copy_u8Priodicity;
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	48 2f       	mov	r20, r24
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	ca 01       	movw	r24, r20
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	9c 01       	movw	r18, r24
    2bd4:	22 0f       	add	r18, r18
    2bd6:	33 1f       	adc	r19, r19
    2bd8:	22 0f       	add	r18, r18
    2bda:	33 1f       	adc	r19, r19
    2bdc:	82 0f       	add	r24, r18
    2bde:	93 1f       	adc	r25, r19
    2be0:	84 0f       	add	r24, r20
    2be2:	95 1f       	adc	r25, r21
    2be4:	fc 01       	movw	r30, r24
    2be6:	e2 56       	subi	r30, 0x62	; 98
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	9c 81       	ldd	r25, Y+4	; 0x04
    2bee:	ad 81       	ldd	r26, Y+5	; 0x05
    2bf0:	be 81       	ldd	r27, Y+6	; 0x06
    2bf2:	80 83       	st	Z, r24
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	a2 83       	std	Z+2, r26	; 0x02
    2bf8:	b3 83       	std	Z+3, r27	; 0x03
		RTO_aTCBNumberOfTasks[Copy_u8Priority].first_delay=Copy_u8FirstDelay;
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	48 2f       	mov	r20, r24
    2bfe:	50 e0       	ldi	r21, 0x00	; 0
    2c00:	ca 01       	movw	r24, r20
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	9c 01       	movw	r18, r24
    2c08:	22 0f       	add	r18, r18
    2c0a:	33 1f       	adc	r19, r19
    2c0c:	22 0f       	add	r18, r18
    2c0e:	33 1f       	adc	r19, r19
    2c10:	82 0f       	add	r24, r18
    2c12:	93 1f       	adc	r25, r19
    2c14:	84 0f       	add	r24, r20
    2c16:	95 1f       	adc	r25, r21
    2c18:	fc 01       	movw	r30, r24
    2c1a:	ee 55       	subi	r30, 0x5E	; 94
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c20:	98 85       	ldd	r25, Y+8	; 0x08
    2c22:	a9 85       	ldd	r26, Y+9	; 0x09
    2c24:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c26:	80 83       	st	Z, r24
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	a2 83       	std	Z+2, r26	; 0x02
    2c2c:	b3 83       	std	Z+3, r27	; 0x03
		RTO_aTCBNumberOfTasks[Copy_u8Priority].pf=Copy_voidPF;
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	48 2f       	mov	r20, r24
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	ca 01       	movw	r24, r20
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	9c 01       	movw	r18, r24
    2c3c:	22 0f       	add	r18, r18
    2c3e:	33 1f       	adc	r19, r19
    2c40:	22 0f       	add	r18, r18
    2c42:	33 1f       	adc	r19, r19
    2c44:	82 0f       	add	r24, r18
    2c46:	93 1f       	adc	r25, r19
    2c48:	84 0f       	add	r24, r20
    2c4a:	95 1f       	adc	r25, r21
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	ea 55       	subi	r30, 0x5A	; 90
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
		RTO_aTCBNumberOfTasks[Copy_u8Priority].TaskState=Copy_u8TaskState;
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	48 2f       	mov	r20, r24
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	ca 01       	movw	r24, r20
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	9c 01       	movw	r18, r24
    2c68:	22 0f       	add	r18, r18
    2c6a:	33 1f       	adc	r19, r19
    2c6c:	22 0f       	add	r18, r18
    2c6e:	33 1f       	adc	r19, r19
    2c70:	82 0f       	add	r24, r18
    2c72:	93 1f       	adc	r25, r19
    2c74:	84 0f       	add	r24, r20
    2c76:	95 1f       	adc	r25, r21
    2c78:	fc 01       	movw	r30, r24
    2c7a:	e8 55       	subi	r30, 0x58	; 88
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	80 83       	st	Z, r24
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <RTO_u8CreateTask+0x102>
	}
    else
    {
	    Local_u8ReturnedState=NOT_OK;
    2c84:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ReturnedState;   
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c88:	2d 96       	adiw	r28, 0x0d	; 13
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	1f 91       	pop	r17
    2c9a:	0f 91       	pop	r16
    2c9c:	ff 90       	pop	r15
    2c9e:	ef 90       	pop	r14
    2ca0:	cf 90       	pop	r12
    2ca2:	08 95       	ret

00002ca4 <RTO_voidScheduler>:
void RTO_voidScheduler(void)
{
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	0f 92       	push	r0
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	u8 SchedulerCounter;
	for(SchedulerCounter=0;SchedulerCounter<RTO_u8_MAX_PRIORITY;SchedulerCounter++)
    2cb6:	19 82       	std	Y+1, r1	; 0x01
    2cb8:	ad c0       	rjmp	.+346    	; 0x2e14 <RTO_voidScheduler+0x170>
	{
		if(RTO_aTCBNumberOfTasks[SchedulerCounter].first_delay == 0)
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	ca 01       	movw	r24, r20
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	9c 01       	movw	r18, r24
    2cc8:	22 0f       	add	r18, r18
    2cca:	33 1f       	adc	r19, r19
    2ccc:	22 0f       	add	r18, r18
    2cce:	33 1f       	adc	r19, r19
    2cd0:	82 0f       	add	r24, r18
    2cd2:	93 1f       	adc	r25, r19
    2cd4:	84 0f       	add	r24, r20
    2cd6:	95 1f       	adc	r25, r21
    2cd8:	fc 01       	movw	r30, r24
    2cda:	ee 55       	subi	r30, 0x5E	; 94
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	91 81       	ldd	r25, Z+1	; 0x01
    2ce2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	a1 05       	cpc	r26, r1
    2cea:	b1 05       	cpc	r27, r1
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <RTO_voidScheduler+0x4c>
    2cee:	5f c0       	rjmp	.+190    	; 0x2dae <RTO_voidScheduler+0x10a>
			{
			if(RTO_aTCBNumberOfTasks[SchedulerCounter].TaskState == Resumed)
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	48 2f       	mov	r20, r24
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	ca 01       	movw	r24, r20
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	9c 01       	movw	r18, r24
    2cfe:	22 0f       	add	r18, r18
    2d00:	33 1f       	adc	r19, r19
    2d02:	22 0f       	add	r18, r18
    2d04:	33 1f       	adc	r19, r19
    2d06:	82 0f       	add	r24, r18
    2d08:	93 1f       	adc	r25, r19
    2d0a:	84 0f       	add	r24, r20
    2d0c:	95 1f       	adc	r25, r21
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e8 55       	subi	r30, 0x58	; 88
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <RTO_voidScheduler+0x78>
    2d1a:	79 c0       	rjmp	.+242    	; 0x2e0e <RTO_voidScheduler+0x16a>
				{
				RTO_aTCBNumberOfTasks[SchedulerCounter].first_delay = RTO_aTCBNumberOfTasks[SchedulerCounter].periodicity-1;
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	08 2f       	mov	r16, r24
    2d20:	10 e0       	ldi	r17, 0x00	; 0
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	48 2f       	mov	r20, r24
    2d26:	50 e0       	ldi	r21, 0x00	; 0
    2d28:	ca 01       	movw	r24, r20
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	9c 01       	movw	r18, r24
    2d30:	22 0f       	add	r18, r18
    2d32:	33 1f       	adc	r19, r19
    2d34:	22 0f       	add	r18, r18
    2d36:	33 1f       	adc	r19, r19
    2d38:	82 0f       	add	r24, r18
    2d3a:	93 1f       	adc	r25, r19
    2d3c:	84 0f       	add	r24, r20
    2d3e:	95 1f       	adc	r25, r21
    2d40:	fc 01       	movw	r30, r24
    2d42:	e2 56       	subi	r30, 0x62	; 98
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	a2 81       	ldd	r26, Z+2	; 0x02
    2d4c:	b3 81       	ldd	r27, Z+3	; 0x03
    2d4e:	ac 01       	movw	r20, r24
    2d50:	bd 01       	movw	r22, r26
    2d52:	41 50       	subi	r20, 0x01	; 1
    2d54:	50 40       	sbci	r21, 0x00	; 0
    2d56:	60 40       	sbci	r22, 0x00	; 0
    2d58:	70 40       	sbci	r23, 0x00	; 0
    2d5a:	c8 01       	movw	r24, r16
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	9c 01       	movw	r18, r24
    2d62:	22 0f       	add	r18, r18
    2d64:	33 1f       	adc	r19, r19
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	82 0f       	add	r24, r18
    2d6c:	93 1f       	adc	r25, r19
    2d6e:	80 0f       	add	r24, r16
    2d70:	91 1f       	adc	r25, r17
    2d72:	fc 01       	movw	r30, r24
    2d74:	ee 55       	subi	r30, 0x5E	; 94
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	40 83       	st	Z, r20
    2d7a:	51 83       	std	Z+1, r21	; 0x01
    2d7c:	62 83       	std	Z+2, r22	; 0x02
    2d7e:	73 83       	std	Z+3, r23	; 0x03
				RTO_aTCBNumberOfTasks[SchedulerCounter].pf();
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	48 2f       	mov	r20, r24
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	ca 01       	movw	r24, r20
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	9c 01       	movw	r18, r24
    2d8e:	22 0f       	add	r18, r18
    2d90:	33 1f       	adc	r19, r19
    2d92:	22 0f       	add	r18, r18
    2d94:	33 1f       	adc	r19, r19
    2d96:	82 0f       	add	r24, r18
    2d98:	93 1f       	adc	r25, r19
    2d9a:	84 0f       	add	r24, r20
    2d9c:	95 1f       	adc	r25, r21
    2d9e:	fc 01       	movw	r30, r24
    2da0:	ea 55       	subi	r30, 0x5A	; 90
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	01 90       	ld	r0, Z+
    2da6:	f0 81       	ld	r31, Z
    2da8:	e0 2d       	mov	r30, r0
    2daa:	09 95       	icall
    2dac:	30 c0       	rjmp	.+96     	; 0x2e0e <RTO_voidScheduler+0x16a>
				}
			}
		else
		{
			RTO_aTCBNumberOfTasks[SchedulerCounter].first_delay--;
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	48 2f       	mov	r20, r24
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	ca 01       	movw	r24, r20
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	9c 01       	movw	r18, r24
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	22 0f       	add	r18, r18
    2dc2:	33 1f       	adc	r19, r19
    2dc4:	82 0f       	add	r24, r18
    2dc6:	93 1f       	adc	r25, r19
    2dc8:	84 0f       	add	r24, r20
    2dca:	95 1f       	adc	r25, r21
    2dcc:	fc 01       	movw	r30, r24
    2dce:	ee 55       	subi	r30, 0x5E	; 94
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	a2 81       	ldd	r26, Z+2	; 0x02
    2dd8:	b3 81       	ldd	r27, Z+3	; 0x03
    2dda:	7c 01       	movw	r14, r24
    2ddc:	8d 01       	movw	r16, r26
    2dde:	08 94       	sec
    2de0:	e1 08       	sbc	r14, r1
    2de2:	f1 08       	sbc	r15, r1
    2de4:	01 09       	sbc	r16, r1
    2de6:	11 09       	sbc	r17, r1
    2de8:	ca 01       	movw	r24, r20
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	9c 01       	movw	r18, r24
    2df0:	22 0f       	add	r18, r18
    2df2:	33 1f       	adc	r19, r19
    2df4:	22 0f       	add	r18, r18
    2df6:	33 1f       	adc	r19, r19
    2df8:	82 0f       	add	r24, r18
    2dfa:	93 1f       	adc	r25, r19
    2dfc:	84 0f       	add	r24, r20
    2dfe:	95 1f       	adc	r25, r21
    2e00:	fc 01       	movw	r30, r24
    2e02:	ee 55       	subi	r30, 0x5E	; 94
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	e0 82       	st	Z, r14
    2e08:	f1 82       	std	Z+1, r15	; 0x01
    2e0a:	02 83       	std	Z+2, r16	; 0x02
    2e0c:	13 83       	std	Z+3, r17	; 0x03
    return Local_u8ReturnedState;   
}
void RTO_voidScheduler(void)
{
	u8 SchedulerCounter;
	for(SchedulerCounter=0;SchedulerCounter<RTO_u8_MAX_PRIORITY;SchedulerCounter++)
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	8f 5f       	subi	r24, 0xFF	; 255
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	86 30       	cpi	r24, 0x06	; 6
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <RTO_voidScheduler+0x178>
    2e1a:	4f cf       	rjmp	.-354    	; 0x2cba <RTO_voidScheduler+0x16>
		else
		{
			RTO_aTCBNumberOfTasks[SchedulerCounter].first_delay--;
		}
	}
}
    2e1c:	0f 90       	pop	r0
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	ff 90       	pop	r15
    2e28:	ef 90       	pop	r14
    2e2a:	08 95       	ret

00002e2c <RTO_voidStartSys>:

void RTO_voidStartSys(void)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidControlGIE(GIE_u8_ON);
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	0e 94 da 08 	call	0x11b4	; 0x11b4 <EXTI_voidControlGIE>
	TMR0_voidInit();
    2e3a:	0e 94 67 17 	call	0x2ece	; 0x2ece <TMR0_voidInit>
	TMR0_voidSetCallBack(TMR0_u8_NORMAL,&RTO_voidScheduler);
    2e3e:	22 e5       	ldi	r18, 0x52	; 82
    2e40:	36 e1       	ldi	r19, 0x16	; 22
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	b9 01       	movw	r22, r18
    2e46:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <TMR0_voidSetCallBack>
	TMR0_voidEnablePIE(TMR0_u8_OVERFLOW);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	0e 94 91 17 	call	0x2f22	; 0x2f22 <TMR0_voidEnablePIE>
}
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <SuspendTask>:

void SuspendTask(u8 Copy_u8Priority)
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	0f 92       	push	r0
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	89 83       	std	Y+1, r24	; 0x01
	RTO_aTCBNumberOfTasks[Copy_u8Priority].TaskState = Suspended;
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	48 2f       	mov	r20, r24
    2e66:	50 e0       	ldi	r21, 0x00	; 0
    2e68:	ca 01       	movw	r24, r20
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	9c 01       	movw	r18, r24
    2e70:	22 0f       	add	r18, r18
    2e72:	33 1f       	adc	r19, r19
    2e74:	22 0f       	add	r18, r18
    2e76:	33 1f       	adc	r19, r19
    2e78:	82 0f       	add	r24, r18
    2e7a:	93 1f       	adc	r25, r19
    2e7c:	84 0f       	add	r24, r20
    2e7e:	95 1f       	adc	r25, r21
    2e80:	fc 01       	movw	r30, r24
    2e82:	e8 55       	subi	r30, 0x58	; 88
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	82 e0       	ldi	r24, 0x02	; 2
    2e88:	80 83       	st	Z, r24
}
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <ResumeTask>:

void ResumeTask(u8 Copy_u8Priority)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	RTO_aTCBNumberOfTasks[Copy_u8Priority].TaskState = Resumed;
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	48 2f       	mov	r20, r24
    2ea2:	50 e0       	ldi	r21, 0x00	; 0
    2ea4:	ca 01       	movw	r24, r20
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	9c 01       	movw	r18, r24
    2eac:	22 0f       	add	r18, r18
    2eae:	33 1f       	adc	r19, r19
    2eb0:	22 0f       	add	r18, r18
    2eb2:	33 1f       	adc	r19, r19
    2eb4:	82 0f       	add	r24, r18
    2eb6:	93 1f       	adc	r25, r19
    2eb8:	84 0f       	add	r24, r20
    2eba:	95 1f       	adc	r25, r21
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	e8 55       	subi	r30, 0x58	; 88
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	80 83       	st	Z, r24
}
    2ec6:	0f 90       	pop	r0
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <TMR0_voidInit>:
static u8 TMR0_u8BusyFlag=0;
volatile static u16 ICU_u16OFF;
volatile static u16 ICU_u16ON;

void TMR0_voidInit(void)
{
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
	//Select TMR0 Mode
	#if 	TMR0_MODE == TMR0_NORMAL_MODE
		CLEAR_BIT(TCCR0_u8_REG,3);
    2ed6:	a3 e5       	ldi	r26, 0x53	; 83
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e3 e5       	ldi	r30, 0x53	; 83
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	87 7f       	andi	r24, 0xF7	; 247
    2ee2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_u8_REG,6);
    2ee4:	a3 e5       	ldi	r26, 0x53	; 83
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e3 e5       	ldi	r30, 0x53	; 83
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	8f 7b       	andi	r24, 0xBF	; 191
    2ef0:	8c 93       	st	X, r24
	if((TMR0_PRELOAD_VALUE) && (TMR0_CASE == TMR0_CASE_2))
	{
		TCNT0_u8_REG = TMR0_PRELOAD_VALUE;
	}
	//Select TMR0 Clock
	CLEAR_BIT(TCCR0_u8_REG,0);
    2ef2:	a3 e5       	ldi	r26, 0x53	; 83
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e3 e5       	ldi	r30, 0x53	; 83
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	8e 7f       	andi	r24, 0xFE	; 254
    2efe:	8c 93       	st	X, r24
	SET_BIT(TCCR0_u8_REG,1);
    2f00:	a3 e5       	ldi	r26, 0x53	; 83
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e3 e5       	ldi	r30, 0x53	; 83
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	82 60       	ori	r24, 0x02	; 2
    2f0c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_u8_REG,2);
    2f0e:	a3 e5       	ldi	r26, 0x53	; 83
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e3 e5       	ldi	r30, 0x53	; 83
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	8b 7f       	andi	r24, 0xFB	; 251
    2f1a:	8c 93       	st	X, r24
}
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <TMR0_voidEnablePIE>:
void TMR0_voidEnablePIE(u8 Copy_u8PIE)
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <TMR0_voidEnablePIE+0x6>
    2f28:	0f 92       	push	r0
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PIE)
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	28 2f       	mov	r18, r24
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	3b 83       	std	Y+3, r19	; 0x03
    2f38:	2a 83       	std	Y+2, r18	; 0x02
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	31 f0       	breq	.+12     	; 0x2f4e <TMR0_voidEnablePIE+0x2c>
    2f42:	2a 81       	ldd	r18, Y+2	; 0x02
    2f44:	3b 81       	ldd	r19, Y+3	; 0x03
    2f46:	21 30       	cpi	r18, 0x01	; 1
    2f48:	31 05       	cpc	r19, r1
    2f4a:	49 f0       	breq	.+18     	; 0x2f5e <TMR0_voidEnablePIE+0x3c>
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <TMR0_voidEnablePIE+0x4a>
	{
		//PIE for Overflow
		case (TMR0_u8_OVERFLOW):
		{
			SET_BIT(TIMSK_u8_REG,0);
    2f4e:	a9 e5       	ldi	r26, 0x59	; 89
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e9 e5       	ldi	r30, 0x59	; 89
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	81 60       	ori	r24, 0x01	; 1
    2f5a:	8c 93       	st	X, r24
    2f5c:	07 c0       	rjmp	.+14     	; 0x2f6c <TMR0_voidEnablePIE+0x4a>
			break;
		}
		//PIE for Compare Match
		case (TMR0_u8_COMPARE_MATCH):
		{
			SET_BIT(TIMSK_u8_REG,1);
    2f5e:	a9 e5       	ldi	r26, 0x59	; 89
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e9 e5       	ldi	r30, 0x59	; 89
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	82 60       	ori	r24, 0x02	; 2
    2f6a:	8c 93       	st	X, r24
			break;
		}
	}
}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <TMR0_voidSetCallBack>:
void TMR0_voidSetCallBack(u8 Copy_u8Mode,void (*Copy_PF)(void))
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <TMR0_voidSetCallBack+0x6>
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <TMR0_voidSetCallBack+0x8>
    2f80:	0f 92       	push	r0
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	7b 83       	std	Y+3, r23	; 0x03
    2f8a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_PF != NULL) && (TMR0_u8BusyFlag == 0))
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	11 f1       	breq	.+68     	; 0x2fd8 <TMR0_voidSetCallBack+0x60>
    2f94:	80 91 92 00 	lds	r24, 0x0092
    2f98:	88 23       	and	r24, r24
    2f9a:	f1 f4       	brne	.+60     	; 0x2fd8 <TMR0_voidSetCallBack+0x60>
	{
		TMR0_u8BusyFlag = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	80 93 92 00 	sts	0x0092, r24
		switch(Copy_u8Mode)
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	3d 83       	std	Y+5, r19	; 0x05
    2faa:	2c 83       	std	Y+4, r18	; 0x04
    2fac:	8c 81       	ldd	r24, Y+4	; 0x04
    2fae:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	61 f0       	breq	.+24     	; 0x2fcc <TMR0_voidSetCallBack+0x54>
    2fb4:	2c 81       	ldd	r18, Y+4	; 0x04
    2fb6:	3d 81       	ldd	r19, Y+5	; 0x05
    2fb8:	21 30       	cpi	r18, 0x01	; 1
    2fba:	31 05       	cpc	r19, r1
    2fbc:	69 f4       	brne	.+26     	; 0x2fd8 <TMR0_voidSetCallBack+0x60>
		{
			case (TMR0_u8_NORMAL):
			{
				TMR0_OverFlow = Copy_PF;
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	90 93 8f 00 	sts	0x008F, r25
    2fc6:	80 93 8e 00 	sts	0x008E, r24
    2fca:	06 c0       	rjmp	.+12     	; 0x2fd8 <TMR0_voidSetCallBack+0x60>
				break;
			}
			case (TMR0_u8_CTC):
			{
				TMR0_CompareMatch = Copy_PF;
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd0:	90 93 91 00 	sts	0x0091, r25
    2fd4:	80 93 90 00 	sts	0x0090, r24
				break;
			}
		}
	}
}
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2fe8:	1f 92       	push	r1
    2fea:	0f 92       	push	r0
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	0f 92       	push	r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	2f 93       	push	r18
    2ff4:	3f 93       	push	r19
    2ff6:	4f 93       	push	r20
    2ff8:	5f 93       	push	r21
    2ffa:	6f 93       	push	r22
    2ffc:	7f 93       	push	r23
    2ffe:	8f 93       	push	r24
    3000:	9f 93       	push	r25
    3002:	af 93       	push	r26
    3004:	bf 93       	push	r27
    3006:	ef 93       	push	r30
    3008:	ff 93       	push	r31
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
		}
	#elif TMR0_CASE == TMR0_CASE_2

	#elif TMR0_CASE == TMR0_CASE_3
		static u32 Local_u8Counter = 0;
		Local_u8Counter++;
    3012:	80 91 93 00 	lds	r24, 0x0093
    3016:	90 91 94 00 	lds	r25, 0x0094
    301a:	a0 91 95 00 	lds	r26, 0x0095
    301e:	b0 91 96 00 	lds	r27, 0x0096
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	a1 1d       	adc	r26, r1
    3026:	b1 1d       	adc	r27, r1
    3028:	80 93 93 00 	sts	0x0093, r24
    302c:	90 93 94 00 	sts	0x0094, r25
    3030:	a0 93 95 00 	sts	0x0095, r26
    3034:	b0 93 96 00 	sts	0x0096, r27
		if(TMR0_ISR_VALUE == Local_u8Counter)
    3038:	80 91 93 00 	lds	r24, 0x0093
    303c:	90 91 94 00 	lds	r25, 0x0094
    3040:	a0 91 95 00 	lds	r26, 0x0095
    3044:	b0 91 96 00 	lds	r27, 0x0096
    3048:	84 30       	cpi	r24, 0x04	; 4
    304a:	91 05       	cpc	r25, r1
    304c:	a1 05       	cpc	r26, r1
    304e:	b1 05       	cpc	r27, r1
    3050:	c9 f4       	brne	.+50     	; 0x3084 <__vector_11+0x9c>
		{
			TCNT0_u8_REG = TMR0_ISR_PRELOAD_VALUE;
    3052:	e2 e5       	ldi	r30, 0x52	; 82
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	89 e1       	ldi	r24, 0x19	; 25
    3058:	80 83       	st	Z, r24
			Local_u8Counter = 0;
    305a:	10 92 93 00 	sts	0x0093, r1
    305e:	10 92 94 00 	sts	0x0094, r1
    3062:	10 92 95 00 	sts	0x0095, r1
    3066:	10 92 96 00 	sts	0x0096, r1
			if(TMR0_OverFlow != NULL)
    306a:	80 91 8e 00 	lds	r24, 0x008E
    306e:	90 91 8f 00 	lds	r25, 0x008F
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	39 f0       	breq	.+14     	; 0x3084 <__vector_11+0x9c>
			{
				TMR0_u8BusyFlag = 0;
    3076:	10 92 92 00 	sts	0x0092, r1
				TMR0_OverFlow();
    307a:	e0 91 8e 00 	lds	r30, 0x008E
    307e:	f0 91 8f 00 	lds	r31, 0x008F
    3082:	09 95       	icall
			}
		}
	#endif
}
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	ff 91       	pop	r31
    308a:	ef 91       	pop	r30
    308c:	bf 91       	pop	r27
    308e:	af 91       	pop	r26
    3090:	9f 91       	pop	r25
    3092:	8f 91       	pop	r24
    3094:	7f 91       	pop	r23
    3096:	6f 91       	pop	r22
    3098:	5f 91       	pop	r21
    309a:	4f 91       	pop	r20
    309c:	3f 91       	pop	r19
    309e:	2f 91       	pop	r18
    30a0:	0f 90       	pop	r0
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	0f 90       	pop	r0
    30a6:	1f 90       	pop	r1
    30a8:	18 95       	reti

000030aa <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    30aa:	1f 92       	push	r1
    30ac:	0f 92       	push	r0
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	0f 92       	push	r0
    30b2:	11 24       	eor	r1, r1
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	if(TMR0_OverFlow != NULL)
    30d4:	80 91 8e 00 	lds	r24, 0x008E
    30d8:	90 91 8f 00 	lds	r25, 0x008F
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	39 f0       	breq	.+14     	; 0x30ee <__vector_10+0x44>
	{
		TMR0_u8BusyFlag = 0;
    30e0:	10 92 92 00 	sts	0x0092, r1
		TMR0_CompareMatch();
    30e4:	e0 91 90 00 	lds	r30, 0x0090
    30e8:	f0 91 91 00 	lds	r31, 0x0091
    30ec:	09 95       	icall
	}
}
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	ff 91       	pop	r31
    30f4:	ef 91       	pop	r30
    30f6:	bf 91       	pop	r27
    30f8:	af 91       	pop	r26
    30fa:	9f 91       	pop	r25
    30fc:	8f 91       	pop	r24
    30fe:	7f 91       	pop	r23
    3100:	6f 91       	pop	r22
    3102:	5f 91       	pop	r21
    3104:	4f 91       	pop	r20
    3106:	3f 91       	pop	r19
    3108:	2f 91       	pop	r18
    310a:	0f 90       	pop	r0
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	0f 90       	pop	r0
    3110:	1f 90       	pop	r1
    3112:	18 95       	reti

00003114 <TMR0_voidStop>:
void TMR0_voidStop(void)
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
	//Select TMR0 Clock
	CLEAR_BIT(TCCR0_u8_REG,0);
    311c:	a3 e5       	ldi	r26, 0x53	; 83
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e3 e5       	ldi	r30, 0x53	; 83
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	8e 7f       	andi	r24, 0xFE	; 254
    3128:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_u8_REG,1);
    312a:	a3 e5       	ldi	r26, 0x53	; 83
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e3 e5       	ldi	r30, 0x53	; 83
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	8d 7f       	andi	r24, 0xFD	; 253
    3136:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_u8_REG,2);
    3138:	a3 e5       	ldi	r26, 0x53	; 83
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e3 e5       	ldi	r30, 0x53	; 83
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	8b 7f       	andi	r24, 0xFB	; 251
    3144:	8c 93       	st	X, r24
}
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <TMR0_voidSetCompareMatch>:

void TMR0_voidSetCompareMatch(u8 Copy_u8CompareMatch)
{
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	0f 92       	push	r0
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	89 83       	std	Y+1, r24	; 0x01
	OCR0_u8_REG = Copy_u8CompareMatch;
    3158:	ec e5       	ldi	r30, 0x5C	; 92
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	80 83       	st	Z, r24
} 
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <TMR1_voidInit>:


void TMR1_voidInit(void)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(TCCR1A_u8_REG,0);
		CLEAR_BIT(TCCR1A_u8_REG,1);
		CLEAR_BIT(TCCR1B_u8_REG,3);
		CLEAR_BIT(TCCR1B_u8_REG,4);
	#elif	TMR1_MODE == TMR1_FAST_PWM_MODE
		CLEAR_BIT(TCCR1A_u8_REG,0);
    3170:	af e4       	ldi	r26, 0x4F	; 79
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	ef e4       	ldi	r30, 0x4F	; 79
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	8e 7f       	andi	r24, 0xFE	; 254
    317c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_u8_REG,1);
    317e:	af e4       	ldi	r26, 0x4F	; 79
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	ef e4       	ldi	r30, 0x4F	; 79
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	82 60       	ori	r24, 0x02	; 2
    318a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_u8_REG,3);
    318c:	ae e4       	ldi	r26, 0x4E	; 78
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	ee e4       	ldi	r30, 0x4E	; 78
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	88 60       	ori	r24, 0x08	; 8
    3198:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_u8_REG,4);
    319a:	ae e4       	ldi	r26, 0x4E	; 78
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	ee e4       	ldi	r30, 0x4E	; 78
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	80 61       	ori	r24, 0x10	; 16
    31a6:	8c 93       	st	X, r24
		#if TMR1_CHANNAL == TMR1_CHANNAL_A
			#if TMR1_PWM_MODE == TMR1_NON_INVERTING
				CLEAR_BIT(TCCR1A_u8_REG,6);
    31a8:	af e4       	ldi	r26, 0x4F	; 79
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	ef e4       	ldi	r30, 0x4F	; 79
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 7b       	andi	r24, 0xBF	; 191
    31b4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A_u8_REG,7);
    31b6:	af e4       	ldi	r26, 0x4F	; 79
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	ef e4       	ldi	r30, 0x4F	; 79
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	80 68       	ori	r24, 0x80	; 128
    31c2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A_u8_REG,5);
			#endif
		#endif
	#endif
	/*Set Prescaler 8*/
	CLEAR_BIT(TCCR1B_u8_REG,0);
    31c4:	ae e4       	ldi	r26, 0x4E	; 78
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	ee e4       	ldi	r30, 0x4E	; 78
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	8e 7f       	andi	r24, 0xFE	; 254
    31d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_u8_REG,1);
    31d2:	ae e4       	ldi	r26, 0x4E	; 78
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	ee e4       	ldi	r30, 0x4E	; 78
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	82 60       	ori	r24, 0x02	; 2
    31de:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_u8_REG,2);
    31e0:	ae e4       	ldi	r26, 0x4E	; 78
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	ee e4       	ldi	r30, 0x4E	; 78
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	8b 7f       	andi	r24, 0xFB	; 251
    31ec:	8c 93       	st	X, r24
}
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <TMR1_voidStopTimer>:

void TMR1_voidStopTimer(void)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B_u8_REG,0);
    31fc:	ae e4       	ldi	r26, 0x4E	; 78
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	ee e4       	ldi	r30, 0x4E	; 78
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	8e 7f       	andi	r24, 0xFE	; 254
    3208:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_u8_REG,1);
    320a:	ae e4       	ldi	r26, 0x4E	; 78
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	ee e4       	ldi	r30, 0x4E	; 78
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	8d 7f       	andi	r24, 0xFD	; 253
    3216:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B_u8_REG,2);
    3218:	ae e4       	ldi	r26, 0x4E	; 78
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	ee e4       	ldi	r30, 0x4E	; 78
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	8b 7f       	andi	r24, 0xFB	; 251
    3224:	8c 93       	st	X, r24
}
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <TMR1_u16GetCounter>:

u16 TMR1_u16GetCounter(void)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
	return TCNT1LH_u16_REG;
    3234:	ec e4       	ldi	r30, 0x4C	; 76
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
}
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <TMR1_voidSetCompareMatch>:

void TMR1_voidSetCompareMatch(u16 Copy_u8CompareMatch)
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <TMR1_voidSetCompareMatch+0x6>
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
	#if TMR1_CHANNAL == TMR1_CHANNAL_A
		OCR1ALH_u16_REG = Copy_u8CompareMatch;
    3250:	ea e4       	ldi	r30, 0x4A	; 74
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
	#elif TMR1_CHANNAL == TMR1_CHANNAL_B
		OCR1BLH_u16_REG = Copy_u8CompareMatch;
	#endif
}
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 Copy_u8ICR)
{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	00 d0       	rcall	.+0      	; 0x326c <TMR1_voidSetICR+0x6>
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	9a 83       	std	Y+2, r25	; 0x02
    3272:	89 83       	std	Y+1, r24	; 0x01
	ICR1LH_u16_REG = Copy_u8ICR;
    3274:	e6 e4       	ldi	r30, 0x46	; 70
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <TMR1_voidInitICU>:

void TMR1_voidInitICU(void)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
	/*Noise cancel*/
	SET_BIT(TCCR1B_u8_REG,7);
    3292:	ae e4       	ldi	r26, 0x4E	; 78
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	ee e4       	ldi	r30, 0x4E	; 78
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	80 68       	ori	r24, 0x80	; 128
    329e:	8c 93       	st	X, r24
	/*Set Risisng Edge*/
	SET_BIT(TCCR1B_u8_REG,6);
    32a0:	ae e4       	ldi	r26, 0x4E	; 78
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	ee e4       	ldi	r30, 0x4E	; 78
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	80 64       	ori	r24, 0x40	; 64
    32ac:	8c 93       	st	X, r24
	/*PIE*/
	SET_BIT(TIMSK_u8_REG,5);
    32ae:	a9 e5       	ldi	r26, 0x59	; 89
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e9 e5       	ldi	r30, 0x59	; 89
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	80 62       	ori	r24, 0x20	; 32
    32ba:	8c 93       	st	X, r24
}
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    32c2:	1f 92       	push	r1
    32c4:	0f 92       	push	r0
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	0f 92       	push	r0
    32ca:	11 24       	eor	r1, r1
    32cc:	2f 93       	push	r18
    32ce:	3f 93       	push	r19
    32d0:	8f 93       	push	r24
    32d2:	9f 93       	push	r25
    32d4:	af 93       	push	r26
    32d6:	bf 93       	push	r27
    32d8:	ef 93       	push	r30
    32da:	ff 93       	push	r31
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <__vector_6+0x20>
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16CounterValue = ICR1LH_u16_REG;
    32e6:	e6 e4       	ldi	r30, 0x46	; 70
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
	static u16 Local_u16OldCounterValue = 0;
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    32f2:	80 91 97 00 	lds	r24, 0x0097
    32f6:	88 23       	and	r24, r24
    32f8:	b1 f4       	brne	.+44     	; 0x3326 <__vector_6+0x64>
	{
		/*Set Falling Edge*/
		CLEAR_BIT(TCCR1B_u8_REG,6);
    32fa:	ae e4       	ldi	r26, 0x4E	; 78
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	ee e4       	ldi	r30, 0x4E	; 78
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	8f 7b       	andi	r24, 0xBF	; 191
    3306:	8c 93       	st	X, r24
		Local_u8Flag = 1;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	80 93 97 00 	sts	0x0097, r24
		ICU_u16OFF = Local_u16CounterValue - Local_u16OldCounterValue;
    330e:	20 91 98 00 	lds	r18, 0x0098
    3312:	30 91 99 00 	lds	r19, 0x0099
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	9a 81       	ldd	r25, Y+2	; 0x02
    331a:	82 1b       	sub	r24, r18
    331c:	93 0b       	sbc	r25, r19
    331e:	90 93 9b 00 	sts	0x009B, r25
    3322:	80 93 9a 00 	sts	0x009A, r24
	}
	if(Local_u8Flag == 1)
    3326:	80 91 97 00 	lds	r24, 0x0097
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	a9 f4       	brne	.+42     	; 0x3358 <__vector_6+0x96>
	{
		/*Set Falling Edge*/
		SET_BIT(TCCR1B_u8_REG,6);
    332e:	ae e4       	ldi	r26, 0x4E	; 78
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	ee e4       	ldi	r30, 0x4E	; 78
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	80 64       	ori	r24, 0x40	; 64
    333a:	8c 93       	st	X, r24
		Local_u8Flag = 0;
    333c:	10 92 97 00 	sts	0x0097, r1
		ICU_u16ON = Local_u16CounterValue - Local_u16OldCounterValue;
    3340:	20 91 98 00 	lds	r18, 0x0098
    3344:	30 91 99 00 	lds	r19, 0x0099
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	9a 81       	ldd	r25, Y+2	; 0x02
    334c:	82 1b       	sub	r24, r18
    334e:	93 0b       	sbc	r25, r19
    3350:	90 93 9d 00 	sts	0x009D, r25
    3354:	80 93 9c 00 	sts	0x009C, r24
	}
	Local_u16OldCounterValue = Local_u16CounterValue;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	9a 81       	ldd	r25, Y+2	; 0x02
    335c:	90 93 99 00 	sts	0x0099, r25
    3360:	80 93 98 00 	sts	0x0098, r24
}
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	ff 91       	pop	r31
    336e:	ef 91       	pop	r30
    3370:	bf 91       	pop	r27
    3372:	af 91       	pop	r26
    3374:	9f 91       	pop	r25
    3376:	8f 91       	pop	r24
    3378:	3f 91       	pop	r19
    337a:	2f 91       	pop	r18
    337c:	0f 90       	pop	r0
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	0f 90       	pop	r0
    3382:	1f 90       	pop	r1
    3384:	18 95       	reti

00003386 <ICU_voidTotalPeriod>:

u32 ICU_voidTotalPeriod(void)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <ICU_voidTotalPeriod+0x6>
    338c:	00 d0       	rcall	.+0      	; 0x338e <ICU_voidTotalPeriod+0x8>
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32TotalPeriod = ICU_u16OFF + ICU_u16ON;
    3392:	20 91 9a 00 	lds	r18, 0x009A
    3396:	30 91 9b 00 	lds	r19, 0x009B
    339a:	80 91 9c 00 	lds	r24, 0x009C
    339e:	90 91 9d 00 	lds	r25, 0x009D
    33a2:	82 0f       	add	r24, r18
    33a4:	93 1f       	adc	r25, r19
    33a6:	cc 01       	movw	r24, r24
    33a8:	a0 e0       	ldi	r26, 0x00	; 0
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	ab 83       	std	Y+3, r26	; 0x03
    33b2:	bc 83       	std	Y+4, r27	; 0x04
	return Local_u32TotalPeriod;
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	9a 81       	ldd	r25, Y+2	; 0x02
    33b8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ba:	bc 81       	ldd	r27, Y+4	; 0x04
}
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <ICU_u8DutyCycle>:

u8 ICU_u8DutyCycle(void)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <ICU_u8DutyCycle+0x6>
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <ICU_u8DutyCycle+0x8>
    33d6:	0f 92       	push	r0
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32TotalPeriod = ICU_voidTotalPeriod();
    33dc:	0e 94 c3 19 	call	0x3386	; 0x3386 <ICU_voidTotalPeriod>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	8a 83       	std	Y+2, r24	; 0x02
    33e6:	9b 83       	std	Y+3, r25	; 0x03
    33e8:	ac 83       	std	Y+4, r26	; 0x04
    33ea:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8DutyCycle = (u8)((u32)(ICU_u16ON*100UL)/(u32)Local_u32TotalPeriod);
    33ec:	80 91 9c 00 	lds	r24, 0x009C
    33f0:	90 91 9d 00 	lds	r25, 0x009D
    33f4:	cc 01       	movw	r24, r24
    33f6:	a0 e0       	ldi	r26, 0x00	; 0
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	24 e6       	ldi	r18, 0x64	; 100
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__mulsi3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	2a 81       	ldd	r18, Y+2	; 0x02
    3410:	3b 81       	ldd	r19, Y+3	; 0x03
    3412:	4c 81       	ldd	r20, Y+4	; 0x04
    3414:	5d 81       	ldd	r21, Y+5	; 0x05
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 4d 1a 	call	0x349a	; 0x349a <__udivmodsi4>
    341e:	da 01       	movw	r26, r20
    3420:	c9 01       	movw	r24, r18
    3422:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8DutyCycle;
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <__mulsi3>:
    3436:	62 9f       	mul	r22, r18
    3438:	d0 01       	movw	r26, r0
    343a:	73 9f       	mul	r23, r19
    343c:	f0 01       	movw	r30, r0
    343e:	82 9f       	mul	r24, r18
    3440:	e0 0d       	add	r30, r0
    3442:	f1 1d       	adc	r31, r1
    3444:	64 9f       	mul	r22, r20
    3446:	e0 0d       	add	r30, r0
    3448:	f1 1d       	adc	r31, r1
    344a:	92 9f       	mul	r25, r18
    344c:	f0 0d       	add	r31, r0
    344e:	83 9f       	mul	r24, r19
    3450:	f0 0d       	add	r31, r0
    3452:	74 9f       	mul	r23, r20
    3454:	f0 0d       	add	r31, r0
    3456:	65 9f       	mul	r22, r21
    3458:	f0 0d       	add	r31, r0
    345a:	99 27       	eor	r25, r25
    345c:	72 9f       	mul	r23, r18
    345e:	b0 0d       	add	r27, r0
    3460:	e1 1d       	adc	r30, r1
    3462:	f9 1f       	adc	r31, r25
    3464:	63 9f       	mul	r22, r19
    3466:	b0 0d       	add	r27, r0
    3468:	e1 1d       	adc	r30, r1
    346a:	f9 1f       	adc	r31, r25
    346c:	bd 01       	movw	r22, r26
    346e:	cf 01       	movw	r24, r30
    3470:	11 24       	eor	r1, r1
    3472:	08 95       	ret

00003474 <__divmodhi4>:
    3474:	97 fb       	bst	r25, 7
    3476:	09 2e       	mov	r0, r25
    3478:	07 26       	eor	r0, r23
    347a:	0a d0       	rcall	.+20     	; 0x3490 <__divmodhi4_neg1>
    347c:	77 fd       	sbrc	r23, 7
    347e:	04 d0       	rcall	.+8      	; 0x3488 <__divmodhi4_neg2>
    3480:	2e d0       	rcall	.+92     	; 0x34de <__udivmodhi4>
    3482:	06 d0       	rcall	.+12     	; 0x3490 <__divmodhi4_neg1>
    3484:	00 20       	and	r0, r0
    3486:	1a f4       	brpl	.+6      	; 0x348e <__divmodhi4_exit>

00003488 <__divmodhi4_neg2>:
    3488:	70 95       	com	r23
    348a:	61 95       	neg	r22
    348c:	7f 4f       	sbci	r23, 0xFF	; 255

0000348e <__divmodhi4_exit>:
    348e:	08 95       	ret

00003490 <__divmodhi4_neg1>:
    3490:	f6 f7       	brtc	.-4      	; 0x348e <__divmodhi4_exit>
    3492:	90 95       	com	r25
    3494:	81 95       	neg	r24
    3496:	9f 4f       	sbci	r25, 0xFF	; 255
    3498:	08 95       	ret

0000349a <__udivmodsi4>:
    349a:	a1 e2       	ldi	r26, 0x21	; 33
    349c:	1a 2e       	mov	r1, r26
    349e:	aa 1b       	sub	r26, r26
    34a0:	bb 1b       	sub	r27, r27
    34a2:	fd 01       	movw	r30, r26
    34a4:	0d c0       	rjmp	.+26     	; 0x34c0 <__udivmodsi4_ep>

000034a6 <__udivmodsi4_loop>:
    34a6:	aa 1f       	adc	r26, r26
    34a8:	bb 1f       	adc	r27, r27
    34aa:	ee 1f       	adc	r30, r30
    34ac:	ff 1f       	adc	r31, r31
    34ae:	a2 17       	cp	r26, r18
    34b0:	b3 07       	cpc	r27, r19
    34b2:	e4 07       	cpc	r30, r20
    34b4:	f5 07       	cpc	r31, r21
    34b6:	20 f0       	brcs	.+8      	; 0x34c0 <__udivmodsi4_ep>
    34b8:	a2 1b       	sub	r26, r18
    34ba:	b3 0b       	sbc	r27, r19
    34bc:	e4 0b       	sbc	r30, r20
    34be:	f5 0b       	sbc	r31, r21

000034c0 <__udivmodsi4_ep>:
    34c0:	66 1f       	adc	r22, r22
    34c2:	77 1f       	adc	r23, r23
    34c4:	88 1f       	adc	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	1a 94       	dec	r1
    34ca:	69 f7       	brne	.-38     	; 0x34a6 <__udivmodsi4_loop>
    34cc:	60 95       	com	r22
    34ce:	70 95       	com	r23
    34d0:	80 95       	com	r24
    34d2:	90 95       	com	r25
    34d4:	9b 01       	movw	r18, r22
    34d6:	ac 01       	movw	r20, r24
    34d8:	bd 01       	movw	r22, r26
    34da:	cf 01       	movw	r24, r30
    34dc:	08 95       	ret

000034de <__udivmodhi4>:
    34de:	aa 1b       	sub	r26, r26
    34e0:	bb 1b       	sub	r27, r27
    34e2:	51 e1       	ldi	r21, 0x11	; 17
    34e4:	07 c0       	rjmp	.+14     	; 0x34f4 <__udivmodhi4_ep>

000034e6 <__udivmodhi4_loop>:
    34e6:	aa 1f       	adc	r26, r26
    34e8:	bb 1f       	adc	r27, r27
    34ea:	a6 17       	cp	r26, r22
    34ec:	b7 07       	cpc	r27, r23
    34ee:	10 f0       	brcs	.+4      	; 0x34f4 <__udivmodhi4_ep>
    34f0:	a6 1b       	sub	r26, r22
    34f2:	b7 0b       	sbc	r27, r23

000034f4 <__udivmodhi4_ep>:
    34f4:	88 1f       	adc	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	5a 95       	dec	r21
    34fa:	a9 f7       	brne	.-22     	; 0x34e6 <__udivmodhi4_loop>
    34fc:	80 95       	com	r24
    34fe:	90 95       	com	r25
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	08 95       	ret

00003506 <__prologue_saves__>:
    3506:	2f 92       	push	r2
    3508:	3f 92       	push	r3
    350a:	4f 92       	push	r4
    350c:	5f 92       	push	r5
    350e:	6f 92       	push	r6
    3510:	7f 92       	push	r7
    3512:	8f 92       	push	r8
    3514:	9f 92       	push	r9
    3516:	af 92       	push	r10
    3518:	bf 92       	push	r11
    351a:	cf 92       	push	r12
    351c:	df 92       	push	r13
    351e:	ef 92       	push	r14
    3520:	ff 92       	push	r15
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	ca 1b       	sub	r28, r26
    3530:	db 0b       	sbc	r29, r27
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	09 94       	ijmp

0000353e <__epilogue_restores__>:
    353e:	2a 88       	ldd	r2, Y+18	; 0x12
    3540:	39 88       	ldd	r3, Y+17	; 0x11
    3542:	48 88       	ldd	r4, Y+16	; 0x10
    3544:	5f 84       	ldd	r5, Y+15	; 0x0f
    3546:	6e 84       	ldd	r6, Y+14	; 0x0e
    3548:	7d 84       	ldd	r7, Y+13	; 0x0d
    354a:	8c 84       	ldd	r8, Y+12	; 0x0c
    354c:	9b 84       	ldd	r9, Y+11	; 0x0b
    354e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3550:	b9 84       	ldd	r11, Y+9	; 0x09
    3552:	c8 84       	ldd	r12, Y+8	; 0x08
    3554:	df 80       	ldd	r13, Y+7	; 0x07
    3556:	ee 80       	ldd	r14, Y+6	; 0x06
    3558:	fd 80       	ldd	r15, Y+5	; 0x05
    355a:	0c 81       	ldd	r16, Y+4	; 0x04
    355c:	1b 81       	ldd	r17, Y+3	; 0x03
    355e:	aa 81       	ldd	r26, Y+2	; 0x02
    3560:	b9 81       	ldd	r27, Y+1	; 0x01
    3562:	ce 0f       	add	r28, r30
    3564:	d1 1d       	adc	r29, r1
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	ed 01       	movw	r28, r26
    3572:	08 95       	ret

00003574 <strlen>:
    3574:	fc 01       	movw	r30, r24
    3576:	01 90       	ld	r0, Z+
    3578:	00 20       	and	r0, r0
    357a:	e9 f7       	brne	.-6      	; 0x3576 <strlen+0x2>
    357c:	80 95       	com	r24
    357e:	90 95       	com	r25
    3580:	8e 0f       	add	r24, r30
    3582:	9f 1f       	adc	r25, r31
    3584:	08 95       	ret

00003586 <_exit>:
    3586:	f8 94       	cli

00003588 <__stop_program>:
    3588:	ff cf       	rjmp	.-2      	; 0x3588 <__stop_program>
